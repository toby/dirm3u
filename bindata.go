// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.tmpl
// player.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5d\x6f\xdb\x36\x14\x7d\xef\xaf\xb8\x60\x32\x20\x29\x22\xcb\x69\xe1\xb6\x50\x25\x63\xe8\xd0\x8f\x01\x1b\x10\xac\xdd\xde\x69\xf2\x4a\xe2\x42\x91\x2a\x49\x29\x36\x0c\xff\xf7\x81\xfa\xb0\x24\xdb\x49\x1c\x60\xf1\x43\x2c\x92\xe7\xdc\x7b\x2e\xcf\xa5\xe8\x38\x77\x85\x5c\xbe\x02\x88\x73\xa4\xdc\x7f\x01\x88\x0b\x74\x14\x58\x4e\x8d\x45\x97\x90\xca\xa5\xc1\x07\x32\x9e\x52\xb4\xc0\x84\xd4\x02\x1f\x4a\x6d\x1c\x01\xa6\x95\x43\xe5\x12\x22\x94\x70\x82\xca\xc0\x32\x2a\x31\xb9\xbd\x79\x10\xdc\xe5\x09\xc7\x5a\x30\x0c\x9a\x87\x9e\xc7\x09\x27\x71\x59\x0b\x8e\xda\xfe\xba\xdd\xce\xbe\xa3\xa9\xd1\xcc\xbe\x69\xeb\xee\xb4\x71\xbb\x5d\x1c\xb6\x4b\xda\xe5\xd6\x6d\x24\x82\xdb\x94\x98\x10\x87\x6b\x17\x32\x6b\x3b\x2a\x80\x95\xe6\x1b\xd8\x76\x0f\x00\x4c\x4b\x6d\x22\xb8\xf8\xd2\xfc\x7d\xdc\x8f\xaf\x28\xbb\xcf\x8c\xae\x14\x8f\xe0\x62\xfe\xc1\x7f\x86\xc9\x54\x2b\x17\xa4\xb4\x10\x72\x13\x01\xf9\xa3\x62\x82\x53\xf8\x4e\x95\x85\xbf\x95\x60\x9a\x23\xb9\xd9\x0f\x7f\x35\x54\x35\x03\x96\x2a\x1b\x58\x34\x22\x1d\x88\xc2\xd7\x53\xae\x1f\x34\xd7\x05\xbd\x81\xaf\xa8\xb0\xa6\x13\x0c\xbc\x0e\x1f\x85\x91\x1f\x06\x57\x15\xcb\xd1\xc1\x9f\xdf\xc9\x0d\x7c\x43\x59\xa3\x13\xec\x6c\x86\x7f\xd0\x70\xaa\x9e\x0b\xbc\xeb\xfe\xfb\xcd\x47\x03\x95\x1c\xd5\x51\x0a\xeb\x82\xa6\xf0\x81\x2f\x7c\x04\x4a\x2b\x1c\x84\x16\xd4\x64\x42\x45\x30\x6f\x3e\x6f\xe6\xe5\x7a\x98\x2b\x29\xe7\x42\x65\x11\xcc\x3f\x3e\x1a\x48\x8a\x51\xac\x95\x36\x1c\x4d\x1b\x2d\x02\xab\xa5\xe0\x1f\x0f\x27\x1b\xff\x44\x30\x09\x34\x4d\xe2\x76\x32\xc7\x85\x2d\x25\xdd\x44\x20\x94\x14\x0a\x83\x95\xd4\xec\x7e\x98\xee\xe8\x6e\xe7\x23\x50\x9f\xa5\x3e\x48\xef\x49\xaa\x1e\xd4\x98\x79\x04\x2a\xe8\x3a\x18\x82\xfc\x72\xb8\x5c\x14\xd9\xf3\x8b\x01\xf4\xea\x5f\x64\x2e\x48\x85\x8b\xa0\x69\xab\x80\xeb\x07\x75\x48\x76\xd1\xb5\xe0\x69\xc6\x77\x8b\x77\xa7\x8a\x46\x2b\xa7\x0f\x89\x66\x1d\x51\xb0\xd2\xeb\x09\x59\x0b\x79\xb3\x38\x2e\xd6\x18\x12\xe4\x68\xf4\xd1\xbe\x46\x70\x5b\xae\xdb\x5d\x85\x95\xac\x46\x26\xca\x51\x64\xb9\x8b\xe0\xed\x7c\xb2\x75\xa9\xd4\xd4\x45\x20\x31\x75\xcf\x47\x2b\x47\xf1\xf6\xc6\x9b\x5a\xa1\xab\xc3\x9b\x0f\x27\xf6\x7a\x42\x28\x75\xf6\x74\xfa\x06\xf9\x11\xed\x41\xf2\xbd\xa6\xdb\xc5\x73\xd1\x4a\x6d\x9d\x3d\xd7\x66\xa7\xb2\xc9\x0c\xe2\x91\x17\x4e\x84\x98\xf4\xf5\x31\x4d\x29\xd4\x28\xcc\x8b\xfa\xfe\x76\x71\x4e\xd7\xcf\x0a\xe4\x82\x06\x42\xa5\xfa\xc8\x54\x81\xd3\x65\x04\x8b\xb3\x3b\xb7\xe7\xa4\x91\x14\xea\xfe\x8c\x73\xdf\xbf\x2f\x02\x8e\x4c\x1b\xea\x84\x56\x53\x3d\x03\x5b\x2d\xac\x70\xc8\x4f\x11\xce\xfd\xe7\x18\x91\xeb\x1a\xcd\xc9\x04\xde\xbd\xff\xed\xd3\xf1\x7a\xca\x9c\xa8\xf1\x04\xe0\xf3\x97\xc5\xfb\x4f\xc7\x80\x19\xab\x8c\xf1\x1b\xe9\x85\x3e\xae\x76\x1c\xec\x5c\xb5\x53\xea\x27\xa4\xff\x0f\xec\x2f\x2c\xd3\x14\xfc\xa2\x9a\xc5\x61\x63\xdb\xfe\xce\xc0\x8c\x28\x5d\x7f\x49\x48\x2b\xc5\x7c\xca\xe0\x74\x96\x49\xfc\x52\x49\x69\x99\x6f\x9f\x2b\xbc\x1e\xd1\x8b\xf4\x8a\x6b\x56\x15\xa8\xdc\xec\x01\x57\xf7\xc2\x0d\x2b\x3f\x4b\xf4\xe3\x90\x24\x09\xa8\x4a\xca\x31\x0e\x00\xbb\xf5\x7f\xe1\xcf\x0a\xed\x08\x76\x75\xbd\x5f\xb5\x03\x94\x16\x27\xb0\x83\x68\x9f\xd7\xe2\x11\xe8\xa1\xd2\xbd\xba\x38\xec\xaf\x6e\xb1\xbf\x09\x75\xea\xbb\x17\x2d\x93\xd4\xda\x84\xf8\xfd\x0d\xda\x21\x02\x46\x4b\x4c\xc8\x8a\x2a\x85\x66\x7f\x89\x8a\x2b\xb9\xdc\x07\x8b\xa5\x58\xc6\xb4\x07\xfb\x5e\x6c\x0e\x05\xbf\x23\x04\x72\x83\x69\x42\x72\xe7\xca\x28\x0c\x4f\x5d\xdd\xc2\x1e\x30\x2b\xde\x56\x64\x79\x37\x7a\x8a\x43\xba\x8c\x43\x29\xf6\x51\xc3\x3e\x6c\xab\x02\x4d\xf7\xc4\x45\x0d\x82\x27\xa4\x3b\xcb\xba\x34\xb7\x5b\x43\x55\x86\x70\x25\x14\xc7\x35\xf4\xa1\xef\x68\x86\x16\x66\xbf\xfb\xc1\xeb\x5d\x5f\xa9\x86\xa3\x93\x30\x3a\x12\xc9\x20\x73\xbb\x15\x29\x5c\x89\x82\x66\x08\xb3\x3b\xea\xf2\x01\xdc\x51\xf8\x97\xb4\x35\x6c\x24\xf7\xf2\x84\xde\xe6\x74\xf3\xa5\xf0\x1c\xbb\x1d\x01\xad\x98\x14\xec\x3e\x21\x47\x66\x73\xb9\xb0\xd7\x93\x14\xbc\x23\x26\x61\xe3\xf6\x22\xe1\x53\x36\x5a\xda\x84\x38\x53\x21\x01\xa9\x75\x99\xf8\xaf\x50\x1a\x94\x9a\xf2\x84\xf8\xcb\x38\xa7\x8e\x8e\xf8\x5a\xe7\xeb\xca\x30\x7c\x79\xe2\x17\x2e\x99\xcf\x16\xa4\xbb\x67\x37\x69\xf8\xc9\x1f\x9b\x12\x77\xbb\x49\x90\x38\x6c\x66\x27\x3a\x14\x1f\xc9\x88\x6d\x49\x55\x5f\xfd\xe1\xf4\x27\xde\x56\x07\x06\x3a\x95\x98\x77\x10\x9a\x51\x49\x97\xdb\xed\xec\x13\xf5\x95\x6a\x2d\xe4\xe9\x07\x13\x71\x51\xf7\x06\x19\xd2\x88\xf5\xde\xd1\xde\x20\xd1\xab\x3e\xd3\xd6\x43\x97\x8d\x87\x6e\x2e\x6b\x2a\x2b\x84\x28\x99\xba\x69\x2c\xa5\x6d\x86\xc6\x2c\xf8\xb3\xc3\xc1\x65\x6b\xb7\xdd\xae\x77\xd8\xe8\xd4\x22\x5d\x1a\x9d\xd2\xb0\xa4\x19\x86\xdb\xad\x50\xac\x43\xb7\x82\xc6\xcf\x87\x8d\x31\x11\x12\xea\x7d\x93\xec\x95\xc6\xa9\xd6\xee\xa0\xc1\xdb\xa1\xfe\x27\x56\xd8\x3e\xb6\x47\x44\x7b\x32\xc4\x61\xfb\x73\xef\xbf\x00\x00\x00\xff\xff\x47\x21\x75\x8f\xf6\x0d\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3574, mode: os.FileMode(420), modTime: time.Unix(1552510043, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _playerTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x51\x6f\xe3\x36\x0c\x7e\xdf\xaf\x20\xdc\x0d\x68\x0f\x75\x9c\xdc\x90\xbb\xc2\xb5\x8b\xa1\x43\x7b\xf7\xb0\x0d\x87\xb5\xdb\xbb\x22\xd1\xb1\x56\x45\xf2\x24\x3a\x4d\x90\xf9\xbf\x0f\xb2\xe3\xc4\x8e\xd3\x36\x1d\x76\x7e\xb8\x58\xe4\xf7\x7d\x24\x45\xc9\x6c\x92\xd3\x42\xdd\x7c\x07\x90\xe4\xc8\x84\xff\x01\x90\x2c\x90\x18\xf0\x9c\x59\x87\x94\x06\x25\x65\xe1\x55\xd0\x35\x69\xb6\xc0\x34\x58\x4a\x7c\x2e\x8c\xa5\x00\xb8\xd1\x84\x9a\xd2\x40\x6a\x49\x92\xa9\xd0\x71\xa6\x30\x9d\x5c\x3e\x4b\x41\x79\x2a\x70\x29\x39\x86\xf5\x4b\xcb\x43\x92\x14\xde\x6c\x36\xa3\x7b\xa9\x70\x74\xcb\x1c\x56\x15\xfc\x03\x4b\x29\xd0\xb8\x9f\x36\x9b\xd1\x03\xda\x25\xda\xd1\x57\xe3\xe8\x9b\xb1\x54\x55\x49\xd4\x60\x1a\xbc\xa3\xb5\x42\xa0\x75\x81\x69\x40\xb8\xa2\x88\x3b\xb7\xe5\x06\x98\x19\xb1\x86\xcd\xf6\x05\x80\x1b\x65\x6c\x0c\x67\xf7\xf5\xbf\xeb\xdd\xfa\x8c\xf1\xa7\xb9\x35\xa5\x16\x31\x9c\x8d\xaf\xfc\xb3\x37\x66\x46\x53\x98\xb1\x85\x54\xeb\x18\x82\x5f\x4a\x2e\x05\x83\x07\xa6\x1d\xfc\xa1\x25\x37\x02\x83\xcb\xdd\xf2\x17\xcb\x74\xbd\xe0\x98\x76\xa1\x43\x2b\xb3\x3d\x51\xf4\xa1\xcf\xf5\xc8\x72\xb3\x60\x97\xf0\x05\x35\x2e\x59\x0f\x03\x1f\xa2\x17\x61\xc1\xa3\xc5\x59\xc9\x73\x24\xf8\xf5\x21\xb8\x84\xaf\xa8\x96\x48\x92\x9f\xcc\xf0\x27\x5a\xc1\xf4\x5b\xc2\xd5\xf6\x7f\xdf\x0d\x68\xa1\x54\x9d\x3a\x2a\xe9\x28\xac\x0b\x1f\xfa\xc2\xc7\xa0\x8d\xc6\x7d\xa2\x0b\x66\xe7\x52\xc7\x30\xae\x9f\x8f\xe3\x62\xb5\xb7\x15\x4c\x08\xa9\xe7\x31\x8c\xaf\x5f\x14\x52\xb2\xa3\x35\x33\x56\xa0\x6d\xd4\x62\x70\x46\x49\x71\x7d\x68\xac\x1b\x2a\x86\x9e\x50\x3f\x88\x49\xcf\x26\xa4\x2b\x14\x5b\xc7\x20\xb5\x92\x1a\xc3\x99\x32\xfc\x69\x6f\xde\xd2\x4d\xc6\x1d\x50\x1b\xa5\x39\x08\xef\x55\xaa\x16\x54\x37\x73\x07\xb4\x60\xab\x70\x2f\xf2\xc3\xa1\xbb\x5c\xcc\xdf\x76\x06\x30\xb3\xbf\x90\x53\x98\x49\x8a\xa1\x3e\x67\xa1\x30\xcf\xfa\x90\xec\x6c\x7b\x26\x8f\x33\x7e\x9a\x7e\x3a\x56\x34\x56\x92\x39\x24\x1a\x6d\x89\xc2\x99\x59\xf5\xc8\x1a\xc8\xc7\xe9\xb0\x58\x5d\x48\x98\xa3\x35\x83\x7d\x8d\x61\x52\xac\x9a\x5d\x85\x99\x2a\x3b\x4d\x94\xa3\x9c\xe7\x14\xc3\x8f\xe3\xde\xd6\x65\xca\x30\x8a\x41\x61\x46\x6f\xab\x15\x1d\xbd\x5d\xe3\xf5\x5b\x61\x5b\x87\x8f\x57\x47\xf6\xba\x47\xa8\xcc\xfc\xf5\xf0\x2d\x8a\x01\xed\x41\xf0\x6d\x4e\x93\xe9\x5b\x6a\x85\x71\xe4\x4e\x6d\xb3\x63\xd1\xcc\x2d\xe2\xa0\x17\x8e\x48\xf4\xce\xf5\x90\xa6\x90\xba\x23\xf3\xae\x73\x3f\x99\x9e\x72\xea\x47\x0b\x14\x92\x85\x52\x67\x66\xd0\x54\x21\x99\x22\x86\xe9\xc9\x27\xb7\xe5\x64\xb1\x92\xfa\xe9\x84\x7b\xdf\x7f\x2f\x42\x81\xdc\x58\x46\xd2\xe8\x7e\x3e\x7b\xb6\xa5\x74\x92\x50\x1c\x23\x1c\xfb\x67\x88\xc8\xcd\x12\xed\xd1\x00\x3e\x7d\xfe\xf9\x76\xe8\xcf\x38\xc9\x25\x1e\x01\xdc\xdd\x4f\x3f\xdf\x0e\x01\x23\x5e\x5a\xeb\x37\xd2\x27\xfa\x72\xb6\x5d\xb1\x53\xb3\xed\x53\xbf\x92\xfa\xff\xc0\xfe\xce\x32\xf5\xc1\xef\xaa\x59\x12\xd5\x6d\xdb\xce\x0c\xdc\xca\x82\xda\x21\x21\x2b\x35\xf7\x21\x03\x99\xf9\x5c\xe1\x7d\xa9\x94\xe3\xfe\xf8\x9c\xe3\x45\x87\x5e\x66\xe7\xc2\xf0\x72\x81\x9a\x46\xcf\x38\x7b\x92\xb4\xf7\xbc\x53\xe8\xd7\x21\x4d\x53\xd0\xa5\x52\x5d\x1c\x00\x6e\xfd\x7f\xc7\xbf\x4b\x74\x1d\xd8\xf9\xc5\xce\xab\x02\x54\x0e\x7b\xb0\x03\xb5\xbb\x95\x7c\x01\x7a\x98\xe9\x2e\xbb\x24\x6a\x67\xb9\xc4\x4f\x42\xdb\xec\x85\x5c\x82\x14\x69\xb0\xbd\x0c\x76\xc3\x52\x6d\xe0\x8a\x39\xb7\xb3\xf9\x8b\x62\x67\x07\xd8\x6c\x64\x06\xe7\x72\xc1\xe6\x08\xcd\xbc\xf6\x8d\x51\x7e\x51\x55\x9d\xa8\x01\x12\xff\xfd\x72\x96\xa7\x41\x4e\x54\xc4\x51\xb4\xd9\x7c\x3f\x9c\xe2\xa2\xfa\xe0\x47\xed\xe0\xe7\x89\xaa\x2a\x00\xa3\xb9\x92\xfc\x29\x0d\x06\x9b\x41\xb9\x74\x17\xbd\x60\x7c\xc5\x7a\xda\x49\xf3\xa1\xf5\xc1\x5b\xa3\x5c\x1a\x90\x2d\x31\x00\x65\x4c\x91\xfa\x9f\x50\x58\x54\x86\x89\x34\xf0\xd3\xab\x60\xc4\x3a\x7c\x4d\x67\x98\xd2\x72\xfc\x8f\xd1\x9f\x51\x3a\x1e\x4d\x83\xed\x30\x5a\xc7\xb2\xf3\x78\x5c\x17\x58\x55\x3d\xb9\x24\xaa\x5d\x7a\x19\x69\xb1\x4b\x28\x89\x84\x5c\x76\xf7\xe6\x60\x48\xee\xd9\xeb\x9d\x19\xfd\x86\x2b\xf2\x1e\x9d\xa2\xd4\x40\xbf\x1e\x43\xc2\x20\xb7\x98\xa5\x41\xe4\xaf\x50\xb4\x3e\xb6\x16\xd1\xd6\xff\x66\xb8\x96\x44\xec\xe6\x40\x6b\x1f\x66\xc7\x90\x64\xc6\x10\xda\xb6\x83\xfc\xbd\x11\x36\x4b\xed\xa8\x1f\x35\xaf\x4d\x67\x36\x0d\x99\x44\xcd\x9f\x1d\xff\x06\x00\x00\xff\xff\xf8\xcf\x91\xc7\x7e\x0c\x00\x00"

func playerTmplBytes() ([]byte, error) {
	return bindataRead(
		_playerTmpl,
		"player.tmpl",
	)
}

func playerTmpl() (*asset, error) {
	bytes, err := playerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "player.tmpl", size: 3198, mode: os.FileMode(420), modTime: time.Unix(1552321168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl":  indexTmpl,
	"player.tmpl": playerTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl":  &bintree{indexTmpl, map[string]*bintree{}},
	"player.tmpl": &bintree{playerTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
