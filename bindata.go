// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.tmpl
// player.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xe9\x6e\xe3\x36\x10\xfe\xbf\x4f\x31\x60\x52\xc0\x01\x56\x96\xb3\x45\x0e\x68\x25\xa3\x48\x91\xb4\x05\x8a\x22\xe8\xb6\x0f\x40\x93\x63\x7b\x1a\x9a\xd4\x92\x94\x63\xc3\xf5\xbb\x17\xd4\x2d\x1f\xbb\x9b\x45\xa3\x1f\x11\x39\x33\xdf\x7c\x73\x70\x28\xa7\x4b\xbf\x52\xd3\x77\x00\xe9\x12\xb9\x0c\x2f\x00\xe9\x0a\x3d\x07\xb1\xe4\xd6\xa1\xcf\x58\xe1\xe7\xd1\x3d\xeb\x8b\x34\x5f\x61\xc6\xd6\x84\xaf\xb9\xb1\x9e\x81\x30\xda\xa3\xf6\x19\x23\x4d\x9e\xb8\x8a\x9c\xe0\x0a\xb3\xeb\xf7\xaf\x24\xfd\x32\x93\xb8\x26\x81\x51\xb9\x68\x70\x3c\x79\x85\xd3\x35\x49\x34\xee\xa7\xdd\x6e\xfc\x09\xed\x1a\xed\xf8\x57\xe3\xfc\xb3\xb1\x7e\xbf\x4f\xe3\x4a\xa5\x52\x77\x7e\xab\x10\xfc\x36\xc7\x8c\x79\xdc\xf8\x58\x38\x57\x43\x01\xcc\x8c\xdc\xc2\xae\x5e\x00\x08\xa3\x8c\x4d\xe0\xe2\xa9\xfc\xfb\xd8\xee\xcf\xb8\x78\x59\x58\x53\x68\x99\xc0\xc5\xe4\x3e\x3c\x9d\x70\x6e\xb4\x8f\xe6\x7c\x45\x6a\x9b\x00\xfb\xbd\x10\x24\x39\x7c\xe2\xda\xc1\xdf\x9a\x84\x91\xc8\xde\xb7\xdb\xbf\x58\xae\xcb\x0d\xc7\xb5\x8b\x1c\x5a\x9a\x37\x40\xfb\xfa\x7f\x48\x26\x5a\x28\x54\x8f\x97\x22\xe7\xa3\x32\x90\x28\x04\x92\x80\x36\x1a\x3b\x06\x2b\x6e\x17\xa4\x13\x98\x94\xcf\x87\x49\xbe\xe9\x64\x39\x97\x92\xf4\x22\x81\xc9\x79\x47\x8a\x7a\xbe\x66\xc6\x4a\xb4\x95\xb7\x04\x9c\x51\x24\x3f\x1e\x0a\xcb\x7a\x24\x30\x70\x34\x24\x71\x3d\x90\x49\x72\xb9\xe2\xdb\x04\x48\x2b\xd2\x18\xcd\x94\x11\x2f\x9d\xb8\x86\xbb\x9e\xf4\x8c\x1a\x96\xa6\x9f\x87\xf3\xc1\x98\x83\x28\xbe\xe8\xb1\x31\x2a\x7b\xa8\x67\xd4\x86\x30\x8c\x6b\x13\x75\x04\x7f\x38\xc4\xa0\xd5\xe2\x3b\x11\x00\xcc\xec\x1f\x14\x3e\x9a\x93\x4f\xa0\xec\xfb\x48\x9a\x57\x7d\xe8\x61\x4c\x9a\x0b\x4f\x6b\x3c\xd1\xa8\xf7\x93\xbb\xc9\xdd\x51\x32\x2e\xea\x53\x35\x20\xd6\x72\xb8\xbd\xb9\x3d\x55\x37\x5e\x78\x73\xe4\xba\x06\x8a\x66\x66\x73\x94\xad\x36\xc5\x27\x73\x3b\x30\x1d\x26\xe9\xb4\x61\x9f\xcb\x87\x9b\x7c\x03\x27\x9a\x61\xbc\x42\x49\x3c\x22\x3d\xff\x3a\x91\x06\x2d\xf2\x26\x4f\xe0\xe6\x18\x8c\x27\x8a\xf4\xcb\x37\x9c\xfe\x30\x35\x22\x89\xc2\x58\xee\xc9\xe8\xe1\xe9\xeb\xd0\xd6\xe4\xc8\xa3\x3c\x05\x38\x09\xcf\xb1\xc5\xd2\xac\xd1\x9e\x24\x70\x7b\xf7\xf3\xc3\xb1\xfe\xd9\x36\x78\x7c\xba\xb9\x7b\x38\x36\x18\x8b\xc2\xda\x50\x83\x10\xe8\xf9\x68\xfb\xce\xbe\x35\xda\x21\xf4\x17\x42\xff\x1f\xd0\xdf\x98\xa6\xa1\xf1\x9b\x72\x96\xc6\xe5\xd8\x6b\x6e\x0e\x61\x29\xf7\xcd\x55\x31\x2f\xb4\x08\x94\xc1\x9b\xc5\x42\xe1\x53\xa1\x94\x13\x16\x51\x8f\xf0\xaa\x07\x4f\xf3\x91\x34\xa2\x58\xa1\xf6\xe3\x57\x9c\xbd\x90\xef\x34\x1f\x15\x86\x7d\xc8\xb2\x0c\x74\xa1\x54\xdf\x0e\x00\x6b\xfd\x3f\xf1\x73\x81\xae\x67\x36\xba\x6a\xb5\xf6\x80\xca\xe1\xc0\xec\xc0\xdb\xe3\x86\xce\x98\x1e\x46\xda\x46\x97\xc6\xcd\x05\x9e\x86\xfb\xb0\x8e\xbe\xbe\x1e\x84\xe2\xce\x65\x2c\xd4\x37\xaa\xb6\x18\x58\xa3\x30\x63\x33\xae\x35\xda\xe6\x56\x8e\x2b\x61\xbd\x92\xb4\x06\x92\x19\xab\x87\x40\xad\xb4\xdb\x59\xae\x17\x08\x23\xd2\x12\x37\xd0\xdc\xdc\xcf\x7c\x81\x0e\xc6\xbf\x85\xcd\xab\x7d\xc3\xb3\xc4\xa8\xbd\xf7\x66\x49\x7b\x75\x07\x38\x9a\xc3\x88\x56\x7c\x81\x30\x7e\xe6\x7e\xd9\x19\x97\x00\x61\xea\x38\x2b\x32\xb6\xf4\x3e\x4f\xe2\x78\xb7\xbb\x3c\xfe\x58\x88\xcb\x91\x12\xef\x76\x25\xc2\x7e\xcf\xc0\x68\xa1\x48\xbc\x64\xec\xa8\xd0\x7e\x49\xee\x6a\x40\x20\x54\x63\xe8\xb4\x9a\x92\x81\xb0\x35\xca\x65\xcc\xdb\x02\x19\x28\x63\xf2\x2c\xbc\x42\x6e\x51\x19\x2e\x33\x16\x3e\x87\x24\xf7\xbc\x87\x57\x75\x9d\x29\xac\xc0\xb7\x13\xbf\xf0\xd9\x64\x7c\xc3\xea\x2f\x9d\x92\x46\x10\xfe\xb5\xcd\x71\xbf\x1f\x38\x49\xe3\x52\x3a\xd8\x72\x39\xd7\x4d\xb6\xbb\x21\xcb\xa6\x29\x87\xa5\xc5\xf9\x57\xa8\x84\xf1\x8b\xb6\x97\xc4\xe9\x6e\x37\x7e\xe0\x21\x37\x69\xcc\xa7\x69\x1c\xe0\x07\x79\xd3\xb2\x2b\x74\x2c\x69\xdd\x34\x48\x27\x48\xdb\xdd\xba\xd2\x0b\x5f\xf7\x08\x4c\x7a\x29\x6f\x09\xc6\x39\x5f\x60\xa0\x50\xea\x04\x0e\x29\x3c\x5b\x5c\x93\x29\x5c\x20\xf1\xee\x4c\xcd\x06\xa1\x37\x57\xed\x79\xe3\x1e\xf1\x7f\x0f\xd8\x8d\x14\xea\x61\x53\x5f\x85\x56\x17\x47\xad\x7d\x82\x75\x50\x1b\xea\xb2\xe9\x1f\xb8\xf1\x30\xfd\x0e\xee\xa7\x0c\xbb\xbc\x76\xe9\x4e\x8d\x1a\x1e\xcc\xcb\xf2\x60\xbe\xbf\x5c\x73\x55\x20\x24\xd9\x30\x9a\xae\x62\x8a\x42\x63\x94\x71\xe3\xe7\xda\x0a\x2e\x9b\xcc\x37\x87\xb6\x37\x86\x59\xcd\xe0\x44\xd4\x95\x75\xd5\x33\xfd\x75\xd5\x38\x8a\x4e\x74\x46\xdc\xf0\x4e\xe7\xc6\xf8\x83\x21\x55\x6d\xb5\x0d\x9f\xf2\x46\x1a\x9a\xb4\xfc\x90\x2e\x09\x1d\xb6\xf5\x99\xae\x0e\x06\xe3\xd5\x8f\x05\x9b\x3e\xf7\x56\x6d\x6a\xd3\xb8\x72\x57\x8d\xd1\x6a\x7a\xa6\x71\xf5\xc3\xe8\xbf\x00\x00\x00\xff\xff\x49\xb6\x0f\x95\x20\x0d\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3360, mode: os.FileMode(420), modTime: time.Unix(1552771330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _playerTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x51\x6f\xe3\x36\x0c\x7e\xdf\xaf\x20\xdc\x0d\x68\x0f\x75\x9c\xdc\x90\xbb\xc2\xb5\x8b\xa1\x43\x7b\xf7\xb0\x0d\x87\xb5\xdb\xbb\x22\xd1\xb1\x56\x45\xf2\x24\x3a\x4d\x90\xf9\xbf\x0f\xb2\xe3\xc4\x8e\xd3\x36\x1d\x76\x7e\xb8\x58\xe4\xf7\x7d\x24\x45\xc9\x6c\x92\xd3\x42\xdd\x7c\x07\x90\xe4\xc8\x84\xff\x01\x90\x2c\x90\x18\xf0\x9c\x59\x87\x94\x06\x25\x65\xe1\x55\xd0\x35\x69\xb6\xc0\x34\x58\x4a\x7c\x2e\x8c\xa5\x00\xb8\xd1\x84\x9a\xd2\x40\x6a\x49\x92\xa9\xd0\x71\xa6\x30\x9d\x5c\x3e\x4b\x41\x79\x2a\x70\x29\x39\x86\xf5\x4b\xcb\x43\x92\x14\xde\x6c\x36\xa3\x7b\xa9\x70\x74\xcb\x1c\x56\x15\xfc\x03\x4b\x29\xd0\xb8\x9f\x36\x9b\xd1\x03\xda\x25\xda\xd1\x57\xe3\xe8\x9b\xb1\x54\x55\x49\xd4\x60\x1a\xbc\xa3\xb5\x42\xa0\x75\x81\x69\x40\xb8\xa2\x88\x3b\xb7\xe5\x06\x98\x19\xb1\x86\xcd\xf6\x05\x80\x1b\x65\x6c\x0c\x67\xf7\xf5\xbf\xeb\xdd\xfa\x8c\xf1\xa7\xb9\x35\xa5\x16\x31\x9c\x8d\xaf\xfc\xb3\x37\x66\x46\x53\x98\xb1\x85\x54\xeb\x18\x82\x5f\x4a\x2e\x05\x83\x07\xa6\x1d\xfc\xa1\x25\x37\x02\x83\xcb\xdd\xf2\x17\xcb\x74\xbd\xe0\x98\x76\xa1\x43\x2b\xb3\x3d\x51\xf4\xa1\xcf\xf5\xc8\x72\xb3\x60\x97\xf0\x05\x35\x2e\x59\x0f\x03\x1f\xa2\x17\x61\xc1\xa3\xc5\x59\xc9\x73\x24\xf8\xf5\x21\xb8\x84\xaf\xa8\x96\x48\x92\x9f\xcc\xf0\x27\x5a\xc1\xf4\x5b\xc2\xd5\xf6\x7f\xdf\x0d\x68\xa1\x54\x9d\x3a\x2a\xe9\x28\xac\x0b\x1f\xfa\xc2\xc7\xa0\x8d\xc6\x7d\xa2\x0b\x66\xe7\x52\xc7\x30\xae\x9f\x8f\xe3\x62\xb5\xb7\x15\x4c\x08\xa9\xe7\x31\x8c\xaf\x5f\x14\x52\xb2\xa3\x35\x33\x56\xa0\x6d\xd4\x62\x70\x46\x49\x71\x7d\x68\xac\x1b\x2a\x86\x9e\x50\x3f\x88\x49\xcf\x26\xa4\x2b\x14\x5b\xc7\x20\xb5\x92\x1a\xc3\x99\x32\xfc\x69\x6f\xde\xd2\x4d\xc6\x1d\x50\x1b\xa5\x39\x08\xef\x55\xaa\x16\x54\x37\x73\x07\xb4\x60\xab\x70\x2f\xf2\xc3\xa1\xbb\x5c\xcc\xdf\x76\x06\x30\xb3\xbf\x90\x53\x98\x49\x8a\xa1\x3e\x67\xa1\x30\xcf\xfa\x90\xec\x6c\x7b\x26\x8f\x33\x7e\x9a\x7e\x3a\x56\x34\x56\x92\x39\x24\x1a\x6d\x89\xc2\x99\x59\xf5\xc8\x1a\xc8\xc7\xe9\xb0\x58\x5d\x48\x98\xa3\x35\x83\x7d\x8d\x61\x52\xac\x9a\x5d\x85\x99\x2a\x3b\x4d\x94\xa3\x9c\xe7\x14\xc3\x8f\xe3\xde\xd6\x65\xca\x30\x8a\x41\x61\x46\x6f\xab\x15\x1d\xbd\x5d\xe3\xf5\x5b\x61\x5b\x87\x8f\x57\x47\xf6\xba\x47\xa8\xcc\xfc\xf5\xf0\x2d\x8a\x01\xed\x41\xf0\x6d\x4e\x93\xe9\x5b\x6a\x85\x71\xe4\x4e\x6d\xb3\x63\xd1\xcc\x2d\xe2\xa0\x17\x8e\x48\xf4\xce\xf5\x90\xa6\x90\xba\x23\xf3\xae\x73\x3f\x99\x9e\x72\xea\x47\x0b\x14\x92\x85\x52\x67\x66\xd0\x54\x21\x99\x22\x86\xe9\xc9\x27\xb7\xe5\x64\xb1\x92\xfa\xe9\x84\x7b\xdf\x7f\x2f\x42\x81\xdc\x58\x46\xd2\xe8\x7e\x3e\x7b\xb6\xa5\x74\x92\x50\x1c\x23\x1c\xfb\x67\x88\xc8\xcd\x12\xed\xd1\x00\x3e\x7d\xfe\xf9\x76\xe8\xcf\x38\xc9\x25\x1e\x01\xdc\xdd\x4f\x3f\xdf\x0e\x01\x23\x5e\x5a\xeb\x37\xd2\x27\xfa\x72\xb6\x5d\xb1\x53\xb3\xed\x53\xbf\x92\xfa\xff\xc0\xfe\xce\x32\xf5\xc1\xef\xaa\x59\x12\xd5\x6d\xdb\xce\x0c\xdc\xca\x82\xda\x21\x21\x2b\x35\xf7\x21\x03\x99\xf9\x5c\xe1\x7d\xa9\x94\xe3\xfe\xf8\x9c\xe3\x45\x87\x5e\x66\xe7\xc2\xf0\x72\x81\x9a\x46\xcf\x38\x7b\x92\xb4\xf7\xbc\x53\xe8\xd7\x21\x4d\x53\xd0\xa5\x52\x5d\x1c\x00\x6e\xfd\x7f\xc7\xbf\x4b\x74\x1d\xd8\xf9\xc5\xce\xab\x02\x54\x0e\x7b\xb0\x03\xb5\xbb\x95\x7c\x01\x7a\x98\xe9\x2e\xbb\x24\x6a\x67\xb9\xc4\x4f\x42\xdb\xec\x85\x5c\x82\x14\x69\xb0\xbd\x0c\x76\xc3\x52\x6d\xe0\x8a\x39\xb7\xb3\xf9\x8b\x62\x67\x07\xd8\x6c\x64\x06\xe7\x72\xc1\xe6\x08\xcd\xbc\xf6\x8d\x51\x7e\x51\x55\x9d\xa8\x01\x12\xff\xfd\x72\x96\xa7\x41\x4e\x54\xc4\x51\xb4\xd9\x7c\x3f\x9c\xe2\xa2\xfa\xe0\x47\xed\xe0\xe7\x89\xaa\x2a\x00\xa3\xb9\x92\xfc\x29\x0d\x06\x9b\x41\xb9\x74\x17\xbd\x60\x7c\xc5\x7a\xda\x49\xf3\xa1\xf5\xc1\x5b\xa3\x5c\x1a\x90\x2d\x31\x00\x65\x4c\x91\xfa\x9f\x50\x58\x54\x86\x89\x34\xf0\xd3\xab\x60\xc4\x3a\x7c\x4d\x67\x98\xd2\x72\xfc\x8f\xd1\x9f\x51\x3a\x1e\x4d\x83\xed\x30\x5a\xc7\xb2\xf3\x78\x5c\x17\x58\x55\x3d\xb9\x24\xaa\x5d\x7a\x19\x69\xb1\x4b\x28\x89\x84\x5c\x76\xf7\xe6\x60\x48\xee\xd9\xeb\x9d\x19\xfd\x86\x2b\xf2\x1e\x9d\xa2\xd4\x40\xbf\x1e\x43\xc2\x20\xb7\x98\xa5\x41\xe4\xaf\x50\xb4\x3e\xb6\x16\xd1\xd6\xff\x66\xb8\x96\x44\xec\xe6\x40\x6b\x1f\x66\xc7\x90\x64\xc6\x10\xda\xb6\x83\xfc\xbd\x11\x36\x4b\xed\xa8\x1f\x35\xaf\x4d\x67\x36\x0d\x99\x44\xcd\x9f\x1d\xff\x06\x00\x00\xff\xff\xf8\xcf\x91\xc7\x7e\x0c\x00\x00"

func playerTmplBytes() ([]byte, error) {
	return bindataRead(
		_playerTmpl,
		"player.tmpl",
	)
}

func playerTmpl() (*asset, error) {
	bytes, err := playerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "player.tmpl", size: 3198, mode: os.FileMode(420), modTime: time.Unix(1552770458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl":  indexTmpl,
	"player.tmpl": playerTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl":  &bintree{indexTmpl, map[string]*bintree{}},
	"player.tmpl": &bintree{playerTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
