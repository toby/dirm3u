// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5b\x6f\xdb\x36\x14\x7e\xef\xaf\x38\x60\x32\xa0\x2b\x2c\xcb\x4e\xe1\x34\x50\x24\x63\xc8\xb0\xb6\x03\x36\x20\x40\xb2\xbd\xd3\xe2\xb1\x44\x84\x22\x35\x92\x52\x6d\x08\xfe\xef\x03\x75\xb1\x24\x5b\x69\xdc\xa7\x46\x0f\x11\x79\x74\xbe\xef\x5c\x3e\x5e\x1c\xa6\x36\x13\xeb\x77\x00\x61\x8a\x94\xb9\x17\x80\x30\x43\x4b\x21\x4e\xa9\x36\x68\x23\x52\xd8\xad\x77\x47\x86\x26\x49\x33\x8c\x48\xc9\xf1\x5b\xae\xb4\x25\x10\x2b\x69\x51\xda\x88\x70\xc9\x2d\xa7\xc2\x33\x31\x15\x18\x2d\x67\xdf\x38\xb3\x69\xc4\xb0\xe4\x31\x7a\xf5\xa0\xc3\xb1\xdc\x0a\x5c\x97\x9c\xa1\x32\xbf\x55\xd5\xfc\x09\x75\x89\x7a\xfe\x55\x19\xfb\xa8\xb4\x3d\x1c\x42\xbf\xf9\xa4\xf9\xdc\xd8\xbd\x40\xb0\xfb\x1c\x23\x62\x71\x67\xfd\xd8\x98\x16\x0a\x60\xa3\xd8\x1e\xaa\x76\x00\x10\x2b\xa1\x74\x00\x57\x9f\xeb\xbf\xfb\xe3\xfc\x86\xc6\x2f\x89\x56\x85\x64\x01\x5c\x2d\xee\xdc\xd3\x1b\xb7\x4a\x5a\x6f\x4b\x33\x2e\xf6\x01\x90\xbf\x8a\x98\x33\x0a\x4f\x54\x1a\xf8\x47\xf2\x58\x31\x24\xb3\xe3\xf4\x17\x4d\x65\x3d\x61\xa8\x34\x9e\x41\xcd\xb7\x3d\x90\xff\x61\x8c\xf5\x4c\x53\x95\xd1\x19\x7c\x41\x89\x25\x1d\xf9\xc0\x07\xff\x55\x37\xf2\xac\x71\x53\xc4\x29\x5a\xf8\xfb\x89\xcc\xe0\x2b\x8a\x12\x2d\x8f\x2f\x46\xf8\x17\x35\xa3\xf2\x2d\xe2\x43\xfb\xdf\x35\x1f\x35\x14\x62\x50\x47\xc1\x8d\xf5\xea\xc2\x7b\xae\xf0\x01\x48\x25\xb1\x4f\x34\xa3\x3a\xe1\x32\x80\x45\xfd\xdc\x2c\xf2\x5d\x6f\xcb\x29\x63\x5c\x26\x01\x2c\xee\x5f\x25\x12\x7c\xc0\xb5\x51\x9a\xa1\x6e\xd8\x02\x30\x4a\x70\x76\x7f\x6a\xac\xf5\x13\xc0\x88\x68\x1c\xc4\x72\x64\x63\xdc\xe4\x82\xee\x03\xe0\x52\x70\x89\xde\x46\xa8\xf8\xa5\x37\xb7\x70\xcb\xc5\xc0\xa9\x8b\x52\x9d\x84\xf7\x5d\xa8\xce\xa9\x16\xf3\xc0\x29\xa3\x3b\xaf\x27\xf9\x65\x22\xe8\xe9\x92\x0d\x67\x9b\xd4\x03\x58\xe6\xbb\xa6\x2a\x90\x68\xdc\x9f\x32\xf3\x2c\xf9\x29\xbc\x57\xed\xc2\x9f\x26\xbf\x5d\xdd\x4e\xb5\x8a\x16\x56\x9d\x02\xcd\x5b\x20\x6f\xa3\x76\x23\xb0\xc6\xe5\x66\x75\xde\xa2\xa1\x8b\x97\xa2\x56\x67\x6a\x1a\x46\xbf\x11\xc5\x40\xba\x29\xf2\x24\xb5\x01\x7c\x5c\x8c\x92\xde\x0a\x45\x6d\x00\x02\xb7\xf6\x6d\xb6\x7c\xc0\x77\xac\xe1\x58\x80\x6d\x1d\x6e\xee\x26\x14\x36\x02\x14\x2a\xf9\x7e\xf8\x1a\xd9\x19\xec\x49\xf0\x5d\x4e\xcb\xd5\x5b\x6c\xb9\x32\xd6\x5c\x2a\xee\x57\xa4\x80\xf2\x02\x8a\xd1\x6e\x72\x0e\x93\x73\x39\xa0\xf9\xa1\xdd\x66\xb9\xba\x64\xaf\x99\x67\xc8\x38\xf5\xb8\xdc\xaa\x33\x51\x79\x56\xe5\x01\xac\x2e\xde\x2f\x3a\x4c\x1a\x08\x2e\x5f\x2e\x38\x6d\xdc\x29\xe5\x31\x8c\x95\xa6\x96\x2b\x39\xce\xa7\x47\x2b\xb9\xe1\x16\xd9\x14\xe0\xc2\x3d\xe7\x1e\xa9\x2a\x51\x4f\x06\x70\xfb\xe9\xf7\x87\xf3\xef\x69\x6c\x79\x89\x13\x0e\x7f\x7c\x5e\x7d\x7a\x38\x77\x98\xc7\x85\xd6\xae\x91\x2e\xd1\xd7\xb3\x1d\x92\x5d\x94\x6d\xe8\xd7\xdd\xad\xef\x1a\x7e\x77\xd9\x08\xdd\xd9\xdd\x9e\xf1\xed\xd1\x10\x0b\x6a\x4c\x44\x5c\x59\xbc\x66\x8a\x80\x56\x02\x23\xb2\xa1\x52\xa2\x3e\x1e\xfb\x61\x21\xd6\xc7\x00\x42\xc1\xd7\x21\xed\x9c\x5d\x1f\x6b\x41\xb9\xf0\x09\xa4\x1a\xb7\x11\x49\xad\xcd\x03\xdf\x9f\xba\x6c\xf8\x9d\xc3\x3c\xfb\x58\x90\xf5\xe3\x60\x14\xfa\x74\x1d\xfa\x82\x1f\x59\xfd\x8e\xb6\xc9\x02\x75\x3b\x62\xbc\x04\xce\x22\xd2\xae\x83\x36\xcc\xaa\xd2\x54\x26\x08\xef\xb9\x64\xb8\x83\x8e\xfa\x91\x26\x68\x60\xfe\xa7\x9b\xfc\xf5\xd0\xd5\xbe\xc6\x68\x53\x18\x2c\x27\xd2\xa7\x59\x55\x7c\x0b\xef\x79\x46\x13\x84\xf9\x23\xb5\x69\xef\xdc\x42\xb8\xb3\xc0\xe8\x78\x90\xee\xf5\x44\xbe\xf5\xca\x70\xa5\x70\x18\x87\xc3\x88\x01\x85\xc1\x11\x6a\xd8\x9c\x6c\x2e\x22\xad\x84\x89\x88\xd5\x05\x12\x10\x4a\xe5\x91\x7b\x85\x5c\xa3\x50\x94\x45\xc4\xdd\x0e\x19\xb5\x74\x80\x57\x03\x18\x55\xe8\x18\x7f\x3c\xae\x2b\x1b\x2d\xe6\x2b\xd2\x5e\xfc\xea\x30\x9c\xf1\x79\x9f\xe3\x28\x68\xd7\x8c\xda\x3a\x9a\x32\x39\x95\x5d\x39\xfb\xad\x80\xac\xab\x6a\xfe\x40\x5d\x8e\xa1\xef\x3e\x19\xe5\x2e\x59\xdf\x0d\x9f\xf1\xb2\xeb\x62\x6f\x08\xd5\x51\x76\xae\x8b\xc1\xbb\xce\xb7\x69\xf4\x75\xdd\xe8\xd9\x75\x49\x45\x81\x10\x44\xe3\x96\x0f\xea\xda\x2a\xb6\xee\x28\xfe\xd7\xfa\xc1\x75\xa3\x89\xc3\xa1\x93\xc1\x60\x31\x92\x36\x8c\x56\xcf\x7e\x4e\x13\xf4\xab\x8a\xcb\xb8\xf5\x76\x35\x19\x8f\x4f\xd5\x3b\x4a\xc4\x57\x47\x25\x1f\x33\x0d\xb7\x4a\xd9\x93\x55\xd8\x4c\x75\x37\x77\xbf\x19\x36\xeb\xb8\x59\xbe\xa1\xdf\xfc\x8a\xf8\x3f\x00\x00\xff\xff\x41\x36\x35\xa3\x4d\x0c\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3149, mode: os.FileMode(420), modTime: time.Unix(1549240392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
