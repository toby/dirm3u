// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.tmpl
// player.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5b\x6f\xdb\x36\x14\x7e\xef\xaf\x38\x60\x32\x20\x29\x22\xcb\x69\xe1\xb6\x50\x25\x63\xe8\xd0\xcb\x80\x0d\x08\xd6\x6e\xef\x34\x79\x24\x71\xa1\x48\x95\xa4\x14\x1b\x86\xff\xfb\x40\x5d\x2c\xc9\x76\x12\x07\x58\xf4\x10\xf3\xf2\x7d\xe7\xf6\x1d\x8a\x8a\x73\x57\xc8\xe5\x2b\x80\x38\x47\xca\xfd\x0f\x80\xb8\x40\x47\x81\xe5\xd4\x58\x74\x09\xa9\x5c\x1a\x7c\x20\xe3\x25\x45\x0b\x4c\x48\x2d\xf0\xa1\xd4\xc6\x11\x60\x5a\x39\x54\x2e\x21\x42\x09\x27\xa8\x0c\x2c\xa3\x12\x93\xdb\x9b\x07\xc1\x5d\x9e\x70\xac\x05\xc3\xa0\x19\xf4\x3c\x4e\x38\x89\xcb\x5a\x70\xd4\xf6\xd7\xed\x76\xf6\x1d\x4d\x8d\x66\xf6\x4d\x5b\x77\xa7\x8d\xdb\xed\xe2\xb0\xdd\xd2\x6e\xb7\x6e\x23\x11\xdc\xa6\xc4\x84\x38\x5c\xbb\x90\x59\xdb\x51\x01\xac\x34\xdf\xc0\xb6\x1b\x00\x30\x2d\xb5\x89\xe0\xe2\x4b\xf3\xf7\x71\x3f\xbf\xa2\xec\x3e\x33\xba\x52\x3c\x82\x8b\xf9\x07\xff\x0c\x8b\xa9\x56\x2e\x48\x69\x21\xe4\x26\x02\xf2\x47\xc5\x04\xa7\xf0\x9d\x2a\x0b\x7f\x2b\xc1\x34\x47\x72\xb3\x9f\xfe\x6a\xa8\x6a\x26\x2c\x55\x36\xb0\x68\x44\x3a\x10\x85\xaf\xa7\x5c\x3f\x68\xae\x0b\x7a\x03\x5f\x51\x61\x4d\x27\x18\x78\x1d\x3e\x0a\x23\x3f\x0c\xae\x2a\x96\xa3\x83\x3f\xbf\x93\x1b\xf8\x86\xb2\x46\x27\xd8\xd9\x0c\xff\xa0\xe1\x54\x3d\x67\x78\xd7\xfd\xf7\xc5\x47\x03\x95\x1c\xe5\x51\x0a\xeb\x82\x26\xf1\x81\x4f\x7c\x04\x4a\x2b\x1c\x02\x2d\xa8\xc9\x84\x8a\x60\xde\x3c\x6f\xe6\xe5\x7a\x58\x2b\x29\xe7\x42\x65\x11\xcc\x3f\x3e\x6a\x48\x8a\x91\xad\x95\x36\x1c\x4d\x6b\x2d\x02\xab\xa5\xe0\x1f\x0f\x17\x1b\xfd\x44\x30\x31\x34\x75\xe2\x76\xb2\xc6\x85\x2d\x25\xdd\x44\x20\x94\x14\x0a\x83\x95\xd4\xec\x7e\x58\xee\xe8\x6e\xe7\x23\x50\xef\xa5\x3e\x70\xef\x49\xaa\x1e\xd4\x88\x79\x04\x2a\xe8\x3a\x18\x8c\xfc\x72\xb8\x5d\x14\xd9\xf3\x9b\x01\xf4\xea\x5f\x64\x2e\x48\x85\x8b\xa0\x69\xab\x80\xeb\x07\x75\x48\x76\xd1\xb5\xe0\x69\xc6\x77\x8b\x77\xa7\x92\x46\x2b\xa7\x0f\x89\x66\x1d\x51\xb0\xd2\xeb\x09\x59\x0b\x79\xb3\x38\x4e\xd6\x18\x12\xe4\x68\xf4\x51\x5d\x23\xb8\x2d\xd7\x6d\x55\x61\x25\xab\x91\x88\x72\x14\x59\xee\x22\x78\x3b\x9f\x94\x2e\x95\x9a\xba\x08\x24\xa6\xee\x79\x6b\xe5\xc8\xde\x5e\x78\x53\x29\x74\x79\x78\xf3\xe1\x44\xad\x27\x84\x52\x67\x4f\xbb\x6f\x90\x1f\xd1\x1e\x38\xdf\xc7\x74\xbb\x78\xce\x5a\xa9\xad\xb3\xe7\xca\xec\x94\x37\x99\x41\x3c\xd2\xc2\x09\x13\x93\xbe\x3e\xa6\x29\x85\x1a\x99\x79\x51\xdf\xdf\x2e\xce\xe9\xfa\x59\x81\x5c\xd0\x40\xa8\x54\x1f\x89\x2a\x70\xba\x8c\x60\x71\x76\xe7\xf6\x9c\x34\x92\x42\xdd\x9f\x71\xee\xfb\xf7\x45\xc0\x91\x69\x43\x9d\xd0\x6a\x1a\xcf\xc0\x56\x0b\x2b\x1c\xf2\x53\x84\x73\xff\x1c\x23\x72\x5d\xa3\x39\xe9\xc0\xbb\xf7\xbf\x7d\x3a\xde\x4f\x99\x13\x35\x9e\x00\x7c\xfe\xb2\x78\xff\xe9\x18\x30\x63\x95\x31\xbe\x90\x3e\xd0\xc7\xa3\x1d\x1b\x3b\x37\xda\x29\xf5\x13\xa1\xff\x0f\xec\x2f\x4c\xd3\x14\xfc\xa2\x9c\xc5\x61\x23\xdb\xfe\xce\xc0\x8c\x28\x5d\x7f\x49\x48\x2b\xc5\xbc\xcb\xe0\x74\x96\x49\xfc\x52\x49\x69\x99\x6f\x9f\x2b\xbc\x1e\xd1\x8b\xf4\x8a\x6b\x56\x15\xa8\xdc\xec\x01\x57\xf7\xc2\x0d\x3b\x3f\x4b\xf4\xf3\x90\x24\x09\xa8\x4a\xca\x31\x0e\x00\xbb\xfd\x7f\xe1\xcf\x0a\xed\x08\x76\x75\xbd\xdf\xb5\x03\x94\x16\x27\xb0\x03\x6b\x9f\xd7\xe2\x11\xe8\x61\xa4\xfb\xe8\xe2\xb0\xbf\xba\xc5\xfe\x26\xd4\x45\xdf\xbd\x68\x99\xa4\xd6\x26\xc4\xd7\x37\x68\xa7\x08\x18\x2d\x31\x21\x2b\xaa\x14\x9a\xfd\x25\x2a\xae\xe4\x72\x6f\x2c\x96\x62\x19\xd3\x1e\xec\x7b\xb1\x39\x14\x7c\x45\x08\xe4\x06\xd3\x84\xe4\xce\x95\x51\x18\x9e\xba\xba\x85\x3d\x60\x56\xbc\xad\xc8\xf2\x6e\x34\x8a\x43\xba\x8c\x43\x29\xf6\x56\xc3\xde\x6c\x1b\x05\x9a\x6e\xc4\x45\x0d\x82\x27\xa4\x3b\xcb\x3a\x37\xb7\x5b\x43\x55\x86\x70\x25\x14\xc7\x35\xf4\xa6\xef\x68\x86\x16\x66\xbf\xfb\xc9\xeb\x5d\x9f\xa9\x86\xa3\x0b\x61\x74\x24\x92\x21\xcc\xed\x56\xa4\x70\x25\x0a\x9a\x21\xcc\xee\xa8\xcb\x07\x70\x47\xe1\x5f\xd2\xd6\xb0\x51\xb8\x97\x27\xe2\x6d\x4e\x37\x9f\x0a\xcf\xb1\xdb\x11\xd0\x8a\x49\xc1\xee\x13\x72\x24\x36\x97\x0b\x7b\x3d\x71\xc1\x2b\x62\x62\x36\x6e\x2f\x12\xde\x65\xa3\xa5\x4d\x88\x33\x15\x12\x90\x5a\x97\x89\xff\x09\xa5\x41\xa9\x29\x4f\x88\xbf\x8c\x73\xea\xe8\x88\xaf\x55\xbe\xae\x0c\xc3\x97\x3b\x7e\xe1\x92\xf9\x6c\x41\xba\x7b\x76\xe3\x86\x5f\xfc\xb1\x29\x71\xb7\x9b\x18\x89\xc3\x66\x75\x32\x65\x4b\xaa\xfa\x7c\x0f\xe7\x3d\x59\x6e\xb7\xb3\x4f\xd4\xc7\x18\x87\x7e\xcb\x24\x76\xc5\x87\x72\x85\x5c\xd4\x7d\x99\x87\x85\x58\xef\x75\xe9\xcb\x1c\xbd\xea\xb1\xad\x12\x2e\x1b\x25\xdc\x5c\xd6\x54\x56\x08\x51\x32\xd5\xc4\x28\xaf\x9d\xa4\x9b\x92\xe3\xcf\x0e\x07\x97\xad\x68\x76\xbb\x5e\x27\xa3\xb3\x87\x74\x6e\x74\x82\x0f\x4b\x9a\x61\xb8\xdd\x0a\xc5\x3a\xb4\xcf\xc9\x74\x7c\x28\xef\x49\x20\xa1\xde\x4b\x7d\x1f\x69\x9c\x6a\xed\x0e\xda\xb4\x9d\xea\x3f\x94\xc2\x76\xd8\x36\x7a\xdb\xdf\x71\xd8\x7e\xb4\xfd\x17\x00\x00\xff\xff\x47\x79\xb5\xbf\xbc\x0d\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3516, mode: os.FileMode(420), modTime: time.Unix(1549404238, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _playerTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x51\x4f\xe3\x46\x10\x7e\xef\xaf\x18\x19\x55\xe2\x4e\x38\x4e\xa8\xc2\x21\x63\xa3\x8a\x0a\xee\x1e\xda\xea\x54\x68\xdf\x37\xbb\x63\x7b\xca\x66\xd7\xdd\x5d\x9b\x44\x69\xfe\x7b\xe5\xd8\x8e\xed\x38\x40\x90\x8a\x1f\xc0\x3b\xf3\x7d\xdf\xcc\xec\x8c\x99\x28\x73\x4b\x79\xfb\x03\x40\x94\x21\x13\xd5\x1f\x00\xd1\x12\x1d\x03\x9e\x31\x63\xd1\xc5\x5e\xe1\x12\xff\xda\xeb\x9b\x14\x5b\x62\xec\x95\x84\x2f\xb9\x36\xce\x03\xae\x95\x43\xe5\x62\x8f\x14\x39\x62\xd2\xb7\x9c\x49\x8c\x67\x17\x2f\x24\x5c\x16\x0b\x2c\x89\xa3\xbf\x7b\x69\x79\x1c\x39\x89\xb7\x9b\xcd\xe4\x81\x24\x4e\xee\x98\xc5\xed\x16\xfe\x85\x92\x04\x6a\xfb\xf3\x66\x33\x79\x44\x53\xa2\x99\x7c\xd3\xd6\x7d\xd7\xc6\x6d\xb7\x51\x50\x63\x6a\xbc\x75\x6b\x89\xe0\xd6\x39\xc6\x9e\xc3\x95\x0b\xb8\xb5\x0d\x37\xc0\x42\x8b\x35\x6c\x9a\x17\x00\xae\xa5\x36\x21\x9c\x3d\xec\x7e\x6e\xf6\xe7\x0b\xc6\x9f\x53\xa3\x0b\x25\x42\x38\x9b\x5e\x57\x4f\x67\x4c\xb4\x72\x7e\xc2\x96\x24\xd7\x21\x78\xbf\x16\x9c\x04\x83\x47\xa6\x2c\xfc\xa9\x88\x6b\x81\xde\xc5\xfe\xf8\xab\x61\x6a\x77\x60\x99\xb2\xbe\x45\x43\x49\x47\x14\x7c\x1e\x72\x3d\xb1\x4c\x2f\xd9\x05\x7c\x45\x85\x25\x1b\x60\xe0\x73\xf0\x2a\xcc\x7b\x32\xb8\x28\x78\x86\x0e\x7e\x7b\xf4\x2e\xe0\x1b\xca\x12\x1d\xf1\x93\x19\xfe\x42\x23\x98\x7a\x4f\x78\xdb\xfc\xae\xba\x01\x0d\x14\xb2\x57\x47\x49\xd6\xf9\xbb\xc2\xfb\x55\xe1\x43\x50\x5a\x61\x97\xe8\x92\x99\x94\x54\x08\xd3\xdd\x73\x39\xcd\x57\x9d\x2d\x67\x42\x90\x4a\x43\x98\xde\xbc\x2a\x24\xa9\xa7\xb5\xd0\x46\xa0\xa9\xd5\x42\xb0\x5a\x92\xb8\x39\x34\xee\x1a\x2a\x84\x81\xd0\x30\x88\xd9\xc0\x26\xc8\xe6\x92\xad\x43\x20\x25\x49\xa1\xbf\x90\x9a\x3f\x77\xe6\x86\x6e\x36\xed\x81\xda\x28\xf5\x41\x78\x6f\x52\xb5\xa0\x5d\x33\xf7\x40\x4b\xb6\xf2\x3b\x91\x1f\x0f\xdd\x69\x99\xbe\xef\x0c\xa0\x17\x7f\x23\x77\x7e\x42\x2e\x84\xdd\x9c\xf9\x42\xbf\xa8\x43\xb2\xb3\x66\x26\x8f\x33\x5e\xcd\xaf\x8e\x15\x8d\x15\x4e\x1f\x12\x4d\x1a\x22\x7f\xa1\x57\x03\xb2\x1a\x72\x39\x1f\x17\xab\x0f\xf1\x33\x34\x7a\x74\xaf\x21\xcc\xf2\x55\x7d\xab\xb0\x90\x45\xaf\x89\x32\xa4\x34\x73\x21\xfc\x34\x1d\x5c\x5d\x22\x35\x73\x21\x48\x4c\xdc\xfb\x6a\x79\x4f\x6f\xdf\x78\xc3\x56\x68\xea\x70\x79\x7d\xe4\xae\x07\x84\x52\xa7\x6f\x87\x6f\x50\x8c\x68\x0f\x82\x6f\x73\x9a\xcd\xdf\x53\xcb\xb5\x75\xf6\xd4\x36\x3b\x16\x4d\x6a\x10\x47\xbd\x70\x44\x62\x30\xd7\x63\x9a\x9c\x54\x4f\xe6\x43\x73\x3f\x9b\x9f\x32\xf5\x93\x25\x0a\x62\x3e\xa9\x44\x8f\x9a\xca\x77\x3a\x0f\x61\x7e\xf2\xe4\xb6\x9c\x2c\x94\xa4\x9e\x4f\xf8\xee\x57\xff\x2f\x7c\x81\x5c\x1b\xe6\x48\xab\x61\x3e\x1d\x5b\x49\x96\x1c\x8a\x63\x84\xd3\xea\x19\x23\x32\x5d\xa2\x39\x1a\xc0\xd5\x97\x5f\xee\xc6\xfe\x8c\x3b\x2a\xf1\x08\xe0\xfe\x61\xfe\xe5\x6e\x0c\x98\xf0\xc2\x98\xea\x22\xab\x44\x5f\xcf\xb6\x2f\x76\x6a\xb6\x43\xea\x37\x52\xff\x1f\xd8\x3f\x58\xa6\x21\xf8\x43\x35\x8b\x82\x5d\xdb\xb6\x3b\x03\x37\x94\xbb\x76\x49\x48\x0a\xc5\xab\x90\xc1\xe9\x34\x95\xf8\x50\x48\x69\x79\x35\x3e\xe7\xf8\xa9\x47\x4f\xc9\xb9\xd0\xbc\x58\xa2\x72\x93\x17\x5c\x3c\x93\xeb\x3c\xef\x25\x56\xe7\x10\xc7\x31\xa8\x42\xca\x3e\x0e\x00\x1b\xff\x3f\xf0\x9f\x02\x6d\x0f\x76\xfe\x69\xef\xb5\x05\x94\x16\x07\xb0\x03\xb5\xfb\x15\xbd\x02\x3d\xcc\x74\x9f\x5d\x14\xb4\xbb\x5c\x54\x6d\x42\x4d\xf6\x82\x4a\x20\x11\x7b\xcd\xc7\x60\xbf\x2c\xb5\x3b\xd8\x77\xe6\xb2\x6d\x4b\x1a\x15\xb2\xb3\x1b\xa6\x52\x84\xda\xeb\x89\xa5\x76\xef\x05\x10\x49\xaa\x96\xb8\x6a\x3b\x93\xd4\x21\x50\x89\x8e\x2a\xe8\x73\x51\x02\x93\xdf\x71\xe5\x2a\xb2\xbd\x4b\x75\x10\x42\xc4\x20\x33\x98\xc4\x5e\x50\xcd\x3a\x9a\x60\xb3\xd9\xbb\x36\xd1\x79\xb7\xe3\xb3\x28\x60\xc7\x84\xa3\x40\x50\xd9\xa4\x9e\x68\xed\xd0\x00\x97\xcc\xda\xd8\xab\x5a\xdb\xaf\x8f\xda\x6d\x34\xa8\x5f\xeb\xe2\xd5\x35\x8b\x82\x7a\x33\xfe\x2f\x00\x00\xff\xff\x76\x6c\x2d\x6d\x21\x0b\x00\x00"

func playerTmplBytes() ([]byte, error) {
	return bindataRead(
		_playerTmpl,
		"player.tmpl",
	)
}

func playerTmpl() (*asset, error) {
	bytes, err := playerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "player.tmpl", size: 2849, mode: os.FileMode(420), modTime: time.Unix(1550191386, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl":  indexTmpl,
	"player.tmpl": playerTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl":  &bintree{indexTmpl, map[string]*bintree{}},
	"player.tmpl": &bintree{playerTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
