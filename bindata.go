// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xdf\x6f\xdb\x36\x10\x7e\xdf\x5f\x71\x60\x32\x60\x2b\x22\xcb\x4e\xe1\x34\x50\x24\x63\xc8\xb0\xb6\x03\x36\x20\x40\xb2\xbd\x9f\xc5\xb3\x45\x84\x26\x35\x92\x52\x6d\x08\xfe\xdf\x07\xea\x97\x25\xdb\x69\x5c\xeb\xc1\x22\x8f\xf7\x7d\x77\x1f\xef\x44\xc6\x99\xdb\xc8\xc5\x4f\x00\x71\x46\xc8\xfd\x0b\x40\xbc\x21\x87\x90\x66\x68\x2c\xb9\x84\x15\x6e\x15\xdc\xb3\xa1\x49\xe1\x86\x12\x56\x0a\xfa\x96\x6b\xe3\x18\xa4\x5a\x39\x52\x2e\x61\x42\x09\x27\x50\x06\x36\x45\x49\xc9\xec\xe6\x9b\xe0\x2e\x4b\x38\x95\x22\xa5\xa0\x1e\x74\x38\x4e\x38\x49\x8b\x52\x70\xd2\xf6\xb7\xaa\x9a\x3c\x93\x29\xc9\x4c\xbe\x6a\xeb\x9e\xb4\x71\xfb\x7d\x1c\x36\x4b\x9a\xe5\xd6\xed\x24\x81\xdb\xe5\x94\x30\x47\x5b\x17\xa6\xd6\xb6\x50\x00\x4b\xcd\x77\x50\xb5\x03\x80\x54\x4b\x6d\x22\xb8\xfa\x5c\xff\x1e\xfa\xf9\x25\xa6\xaf\x6b\xa3\x0b\xc5\x23\xb8\x9a\xde\xfb\xe7\x60\x5c\x69\xe5\x82\x15\x6e\x84\xdc\x45\xc0\xfe\x2a\x52\xc1\x11\x9e\x51\x59\xf8\x47\x89\x54\x73\x62\x37\xfd\xf4\x17\x83\xaa\x9e\xb0\xa8\x6c\x60\xc9\x88\xd5\x01\x28\xfc\x30\xc6\x7a\xc1\x4c\x6f\xf0\x06\xbe\x90\xa2\x12\x47\x3e\xf0\x21\x7c\xd3\x8d\xbd\x18\x5a\x16\x69\x46\x0e\xfe\x7e\x66\x37\xf0\x95\x64\x49\x4e\xa4\x17\x23\xfc\x4b\x86\xa3\x7a\x8f\x78\xdf\xfe\xfb\xcd\x27\x03\x85\x1c\xe8\x28\x85\x75\x41\x2d\x7c\xe0\x85\x8f\x40\x69\x45\x87\x44\x37\x68\xd6\x42\x45\x30\xad\x9f\xdb\x69\xbe\x3d\xd8\x72\xe4\x5c\xa8\x75\x04\xd3\x87\x37\x89\xa4\x18\x70\x2d\xb5\xe1\x64\x1a\xb6\x08\xac\x96\x82\x3f\x1c\x1b\xeb\xfa\x89\x60\x44\x34\x0e\x62\x36\xb2\x71\x61\x73\x89\xbb\x08\x84\x92\x42\x51\xb0\x94\x3a\x7d\x3d\x98\x5b\xb8\xd9\x74\xe0\xd4\x45\xa9\x8f\xc2\xfb\x2e\x54\xe7\x54\x17\xf3\xc0\x69\x83\xdb\xe0\x40\xf2\xf3\x99\xa0\xcf\x4b\x36\x9c\x6d\x52\x8f\x60\x96\x6f\x1b\x55\x60\x6d\x68\x77\xcc\x7c\xd5\x36\xe0\x79\xf2\xbb\xf9\xdd\x39\xc9\xb0\x70\xfa\x18\x68\xd2\x02\x05\x4b\xbd\x1d\x81\x35\x2e\xb7\xf3\x53\xa9\x86\x2e\x41\x46\x46\x9f\xec\xea\x30\xfa\xa5\x2c\x06\x25\x94\x91\x58\x67\x2e\x82\x8f\xd3\x51\xd2\x2b\xa9\xd1\x45\x20\x69\xe5\xde\x67\xcb\x07\x7c\xbd\x86\xe3\x42\x68\x75\xb8\xbd\x3f\xb3\xd3\x23\x40\xa9\xd7\xdf\x0f\xdf\x10\x3f\x81\x3d\x0a\xbe\xcb\x69\x36\x7f\x8f\x2d\xd7\xd6\xd9\x4b\x8b\xec\x8d\x52\x20\x75\x01\xc5\xa8\xab\x4f\x61\x72\xa1\x06\x34\x3f\xd4\xf5\xb3\xf9\x25\x3d\x3f\xd9\x10\x17\x18\x08\xb5\xd2\x27\x45\x15\x38\x9d\x47\x30\xbf\xb8\x6f\x3b\x4c\x8c\xa4\x50\xaf\x17\x7c\xf5\xfd\x69\x11\x70\x4a\xb5\x41\x27\xb4\x1a\xe7\x73\x40\x2b\x85\x15\x8e\xf8\x39\xc0\xa9\x7f\x4e\x3d\x32\x5d\x92\x39\x1b\xc0\xdd\xa7\xdf\x1f\x4f\xd7\x63\xea\x44\x49\x67\x1c\xfe\xf8\x3c\xff\xf4\x78\xea\x30\x49\x0b\x63\xfc\x46\xfa\x44\xdf\xce\x76\x48\x76\x51\xb6\x71\x58\xef\xee\xc2\xbf\xfb\x73\x3f\xec\x0e\xfe\xd8\x9f\xa3\xed\x79\xdb\x7e\xa6\x53\x89\xd6\x26\xcc\x4b\x13\x34\x53\x0c\x8c\x96\x94\xb0\x25\x2a\x45\xa6\x3f\x82\xe3\x42\x2e\xfa\x20\x62\x29\x16\x31\x76\xce\x7e\x2f\xeb\xa2\xf2\x29\x30\xc8\x0c\xad\x12\x96\x39\x97\x47\x61\x78\xee\xe0\x0f\x3b\x87\xc9\xe6\x63\xc1\x16\x4f\x83\x51\x1c\xe2\x22\x0e\xa5\xe8\x59\xc3\x8e\xb6\xc9\x82\x4c\x3b\xe2\xa2\x04\xc1\x13\xd6\xf6\x42\x1b\x66\x55\x19\x54\x6b\x82\x5f\x84\xe2\xb4\x85\x8e\xfa\x09\xd7\x64\x61\xf2\xa7\x9f\xfc\x75\xdf\xe9\x5f\x63\xb4\x29\x0c\x5a\x8a\x0d\xd2\x6c\x3e\xf8\xde\x68\xb4\xb4\x09\x73\xa6\x20\x06\x52\xeb\x3c\xf1\xaf\x90\x1b\x92\x1a\x79\xc2\xfc\xa5\x89\xa3\xc3\x81\xb3\xbf\xd3\xe8\xc2\xa4\x04\xd6\xa4\x03\x3d\xae\xcf\x08\x52\xb7\x8f\xd7\xea\x09\x5d\xb6\xdf\x5f\xb9\x64\x3a\x99\xb3\xf6\x36\x54\x07\xe1\x8d\x2f\xbb\x9c\xf6\xfb\x61\x7c\x61\x6d\x1b\x4c\xd8\x1c\x55\x97\xd3\xa1\x27\xd9\xa2\xaa\x26\x8f\x68\xc9\x5f\xba\xfc\x92\x83\xbc\x5c\x94\x9d\x74\xa4\x78\xab\x4d\xac\xfb\xbd\xf6\xd2\x45\xed\x7b\xa7\xee\x75\xad\xee\xcd\x75\x89\xb2\x20\x88\x92\xb1\xce\xbd\xbe\x7d\x99\x54\x95\x58\x01\xfd\xd7\xfa\xc1\x75\xb3\x11\xfb\x7d\xa7\xfd\xa0\x0b\x58\x1b\x46\x5b\x44\x61\x8e\x6b\x0a\xab\x4a\xa8\xb4\xf5\xf6\xf9\x8f\xc7\xc7\x25\x33\x4a\x24\xd4\x7d\xf9\xf4\x99\xc6\x2b\xad\xdd\x51\xe9\x37\x53\xdd\xd5\x35\x6c\x86\x75\xcb\x84\x4d\xcf\xc4\x61\x73\x8d\xfe\x3f\x00\x00\xff\xff\x49\xcb\x71\x75\x4e\x0b\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 2894, mode: os.FileMode(420), modTime: time.Unix(1549219669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
