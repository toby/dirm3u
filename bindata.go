// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.tmpl
// player.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x6d\x6f\xdb\xb6\x13\x7f\xdf\x4f\x71\x50\xf3\x47\xed\xc6\x92\xdc\xfe\x91\xa6\x70\x24\x63\xc8\x90\xae\x03\xba\x2e\x58\xbb\xad\xc1\xb0\x17\xb4\x74\x92\xb8\xd0\xa4\x4a\x52\x7e\x98\xe7\xef\x3e\x50\xcf\xb4\xe5\xb4\x0d\x16\xbf\xb0\x74\xbc\xdf\xdd\xef\x8e\xc7\xe3\x39\x41\xa6\x97\x6c\xfe\x04\x20\xc8\x90\xc4\xe6\x01\x20\x58\xa2\x26\x10\x65\x44\x2a\xd4\xa1\x53\xe8\xc4\x7d\xed\xf4\x97\x38\x59\x62\xe8\xac\x28\xae\x73\x21\xb5\x03\x91\xe0\x1a\xb9\x0e\x1d\xca\xa9\xa6\x84\xb9\x2a\x22\x0c\xc3\x17\x93\x35\x8d\x75\x16\xc6\xb8\xa2\x11\xba\xe5\x4b\x63\x47\x53\xcd\x70\xbe\xa2\x31\x0a\xf5\xdd\x6e\xe7\x7d\x40\xb9\x42\xe9\xbd\x15\x4a\xdf\x0a\xa9\xf7\xfb\xc0\xaf\x54\x2a\x75\xa5\xb7\x0c\x41\x6f\x73\x0c\x1d\x8d\x1b\xed\x47\x4a\xd5\xa6\x00\x16\x22\xde\xc2\xae\x7e\x01\x88\x04\x13\x72\x06\x4f\xdf\x94\x7f\x57\xad\x7c\x41\xa2\xfb\x54\x8a\x82\xc7\x33\x78\x3a\x7d\x6d\x3e\xdd\x62\x22\xb8\x76\x13\xb2\xa4\x6c\x3b\x03\xe7\x5d\x11\xd1\x98\xc0\x07\xc2\x15\xfc\xca\x69\x24\x62\x74\x26\xad\xf8\x07\x49\x78\x29\x50\x84\x2b\x57\xa1\xa4\x49\x63\x68\x5f\x7f\x9b\x64\xa2\x84\x82\xf5\x78\x31\xaa\xb4\x5b\x06\xe2\x9a\x40\x66\xc0\x05\xc7\x8e\xc1\x92\xc8\x94\xf2\x19\x4c\xcb\xcf\xcb\x69\xbe\xe9\xd6\x72\x12\xc7\x94\xa7\x33\x98\x9e\x76\xc4\x68\xcf\xd7\x42\xc8\x18\x65\xe5\x6d\x06\x4a\x30\x1a\x5f\x1d\x2e\x96\xfb\x31\x03\xcb\x91\x4d\xe2\x85\xb5\x16\x53\x95\x33\xb2\x9d\x01\xe5\x8c\x72\x74\x17\x4c\x44\xf7\xdd\x72\x6d\xee\xc5\xb4\x07\x6a\x58\x8a\x7e\x1e\x4e\x07\x23\x0e\xa2\x78\xd0\x63\x03\x2a\x6b\xa8\x07\x6a\x43\xb0\xe3\xda\xb8\x1d\xc1\xff\x1d\xda\xa0\xcb\xf4\x91\x16\x00\xc4\xe2\x2f\x8c\xb4\x9b\x50\x3d\x83\xb2\xee\xdd\x58\xac\xf9\xa1\x07\x8f\x72\x12\x69\xba\xc2\x81\x42\x7d\x3d\xbd\x9c\x5e\x1e\x25\xe3\x69\x7d\xaa\x2c\x62\x2d\x87\x57\x17\xaf\x86\xf6\x8d\x14\x5a\x1c\xb9\xae\x0d\xb9\x0b\xb1\x39\xca\x56\x9b\xe2\xc1\xdc\x5a\x50\x3b\x49\xc3\xc0\x3e\x97\x97\x17\xf9\x06\x06\x8a\xc1\x5b\x62\x4c\x89\x4b\x79\xf2\x65\x22\x8d\x35\x57\x8b\x7c\x06\x17\xc7\xc6\xc8\x8c\x51\x7e\xff\x15\xa7\xdf\x74\x0d\x37\xc6\x48\x48\xa2\xa9\xe0\xf6\xe9\xeb\xac\xad\xa8\xa2\x1a\xe3\x21\x83\x53\xf3\x39\x46\x64\x62\x85\x72\x90\xc0\xab\xcb\xef\xaf\x8f\xf5\x4f\x96\xc1\xcd\x9b\x8b\xcb\xeb\x63\x80\x17\x15\x52\x9a\x3d\x30\x81\x9e\x8e\xb6\xef\xec\x6b\xa3\xb5\x4d\x3f\x10\xfa\x7f\x60\xfd\x1b\xd3\x64\x83\xbf\x29\x67\x81\x5f\xb6\xbd\xe6\xe6\x88\x24\xcd\x75\x73\x55\x24\x05\x8f\x0c\x65\xd0\x22\x4d\x19\xbe\x29\x18\x53\x91\x44\xe4\x23\x1c\xf7\xcc\xd3\x64\x14\x8b\xa8\x58\x22\xd7\xde\x1a\x17\xf7\x54\x77\x9a\x37\x0c\x8d\x1c\xc2\x30\x04\x5e\x30\xd6\xc7\x01\x60\xad\xff\x0b\x7e\x2e\x50\xf5\x60\xa3\x71\xab\xb5\x07\x64\x0a\x2d\xd8\x81\xb7\x9b\x0d\x3d\x01\x6d\x23\x6d\xba\x1f\x91\xd5\x99\x56\x10\x76\x56\x52\xd4\x35\x4d\x75\xbd\xfd\x48\xd2\xf7\x64\x89\x23\xa7\xd4\x73\xc6\x13\x48\x24\xa9\xb2\x10\xc2\xd4\x6b\x2f\xc1\x36\x37\x51\x86\xd1\xfd\x6f\x54\xd1\x05\xc3\x51\x3f\xbc\x44\xc8\x91\x71\x48\x0d\xf0\x0a\x28\x04\xb5\x6f\x8f\x21\x4f\x75\x76\x05\xf4\xfc\xdc\xce\x47\xcb\x0f\xc2\x5a\xf7\x0f\xfa\xe7\xd5\x81\xc2\xa6\x59\xf4\x44\x92\x28\xd4\xef\x30\xd1\x13\xd8\x1e\x48\x3f\x8a\x7c\x02\xeb\x03\xe1\xef\xa6\x1d\x4e\x20\x3b\x10\xbf\x45\x9a\x66\x7a\x02\x12\x42\xd8\xc0\x39\xac\x27\xe0\xfb\xd2\xc8\x7a\xae\x01\x16\x10\xc2\x16\xce\x21\x33\xcb\x0b\xa1\xb5\x58\x5a\xeb\xab\x2a\x09\x9f\x26\xcd\xd3\x5d\xfb\x64\xc5\x50\xab\x41\x08\x3f\x11\x9d\x79\x4b\xb2\x19\x4d\x27\xf5\x33\xe5\xa3\xf5\x04\xd6\x94\xc7\x62\xed\xe5\x24\xc5\x4f\x3f\x97\x14\x0d\xab\x4a\x48\x39\x47\x59\x06\x02\x2e\x6c\x0c\x69\x77\x40\x7f\x3c\x1e\x70\x79\x77\xca\x65\x66\xb9\xbc\x1b\x74\x59\x25\x09\x5c\xd8\x4e\x60\x61\xfb\xbc\x7b\xc0\x67\x99\xea\x3a\xe0\xe7\x1d\x11\x1f\x46\x6b\x78\x0e\x99\x05\xa1\x09\x8c\x1a\xd8\xbc\xad\x3b\xbb\x44\xea\x2b\xdc\xcb\x25\x32\x41\x62\x08\xc1\x31\x53\x66\x4c\x34\x71\xfa\xb6\x06\x8e\xcd\x7e\xe0\x60\x54\xdf\x75\x2c\x24\x8e\x6f\x56\xc8\xf5\x3b\xaa\x34\x72\x94\xa3\x67\xc6\xc5\xb3\x89\x55\xe3\x13\x48\x08\x53\xd8\x12\x3f\x89\x55\x91\x14\x8c\x3d\x16\x2d\x51\xd1\xbf\xf1\x41\x74\xe0\x77\xed\x2a\xf0\x9b\x89\x3c\x30\x03\x6e\xdd\xce\xea\x79\x2f\x62\x44\xa9\xd0\x31\x0d\xdb\xad\x44\x0e\x48\xc1\x30\x74\x16\xc4\x6c\x6d\x33\x66\xfb\xd5\x62\xfd\x16\xd3\x15\xd0\x38\x74\xea\x5b\xbd\x56\xda\xed\x24\xe1\x29\xc2\x88\xf2\x18\x37\xd0\x8c\xe2\xb7\x24\x45\x05\xde\x8f\x46\x38\xde\x37\x79\x2d\x6d\xd4\xde\x7b\xc3\x41\x3b\x8b\x1b\x73\x66\xd3\xe9\x92\xa4\x08\xde\x2d\xd1\x59\x07\x2e\x0d\x98\x31\x42\xc9\x28\x74\x32\xad\xf3\x99\xef\xef\x76\x67\xc7\xd3\xbf\x5f\xce\x08\xfe\x6e\x57\x5a\xd8\xef\x1d\x10\x3c\x62\x34\xba\x0f\x9d\xa3\xce\xad\x33\xaa\xc6\x16\x01\x53\x27\xb6\xd3\xaa\x05\x19\xc2\x52\x30\x15\x3a\x5a\x16\xe8\x00\x13\x22\x0f\xcd\x23\xd4\xb5\x17\x3a\xe6\x26\xeb\xd9\x2a\xc1\x4a\x14\x32\xc2\xc7\x90\xae\x7e\xb0\x94\xce\x8d\xf8\xe3\x36\xc7\xfd\xde\x32\x1f\xf8\xe5\xaa\x25\x52\x39\xe1\x4d\x8e\xbb\x59\xc9\x99\x07\x04\x32\x89\xc9\x17\x48\x98\x29\x0a\x65\x8f\xc5\x7c\xb7\xf3\xae\x89\xc9\x48\xe0\x93\x79\xe0\x1b\xf3\x56\xb6\x78\xdc\x6d\xaf\x1f\xd3\x55\x53\x16\xdd\x42\xd0\x4a\xeb\xfd\x4d\x75\x5d\x19\x30\xed\x25\xba\x25\xe8\x9b\x1e\x62\x28\x94\x3a\x86\x43\x00\xb7\x12\x57\x54\x14\xca\x90\x78\x72\x62\xa7\xac\xd0\x9b\x89\xf9\x34\xb8\x47\xfc\x9f\x03\x76\x23\x86\xdc\x2e\xe5\xb1\x29\xf0\xe8\xa8\xa0\x07\x58\x1b\x35\x5b\xd7\x99\xbf\xc7\x8d\x86\xf9\x23\xb8\x0f\x01\xbb\xbc\x76\xe9\x0e\x04\xb3\x8f\xe3\x59\x79\x1c\x27\x67\x2b\xc2\x0a\x84\x59\x68\x47\xd3\xed\x18\xa3\xa6\x30\xca\xb8\xf1\x73\x8d\x82\xb3\x26\xf3\xcd\x51\xed\x4d\x53\x4e\xcd\x60\x20\xea\x0a\x5d\xd5\x4c\xff\xbd\x2a\x1c\x46\x07\x2a\xc3\x6f\x78\x07\x89\x10\xfa\xa0\x35\x55\xa2\xb6\xe0\x03\xd2\xac\x9a\x22\x2d\x7f\x0f\x97\x84\x0e\xcb\xfa\x44\x55\x1b\x80\xb7\xfc\x7f\xe1\xcc\x6f\x7b\x6f\x6d\x6a\x03\xbf\x72\x57\x35\xcf\xaa\x67\x06\x7e\xf5\xff\x8d\x7f\x03\x00\x00\xff\xff\x5f\xa5\x5a\x31\xe7\x10\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 4327, mode: os.FileMode(420), modTime: time.Unix(1553206266, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _playerTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x51\x6f\xe3\x36\x0c\x7e\xdf\xaf\x20\xdc\x0d\x68\x0f\x75\x9c\xdc\x90\xbb\xc2\xb5\x8b\xa1\x43\x7b\xf7\xb0\x0d\x87\xb5\xdb\xbb\x22\xd1\xb1\x56\x45\xf2\x24\x3a\x4d\x90\xf9\xbf\x0f\xb2\xe3\xc4\x8e\xd3\x36\x1d\x76\x7e\xb8\x58\xe4\xf7\x7d\x24\x45\xc9\x6c\x92\xd3\x42\xdd\x7c\x07\x90\xe4\xc8\x84\xff\x01\x90\x2c\x90\x18\xf0\x9c\x59\x87\x94\x06\x25\x65\xe1\x55\xd0\x35\x69\xb6\xc0\x34\x58\x4a\x7c\x2e\x8c\xa5\x00\xb8\xd1\x84\x9a\xd2\x40\x6a\x49\x92\xa9\xd0\x71\xa6\x30\x9d\x5c\x3e\x4b\x41\x79\x2a\x70\x29\x39\x86\xf5\x4b\xcb\x43\x92\x14\xde\x6c\x36\xa3\x7b\xa9\x70\x74\xcb\x1c\x56\x15\xfc\x03\x4b\x29\xd0\xb8\x9f\x36\x9b\xd1\x03\xda\x25\xda\xd1\x57\xe3\xe8\x9b\xb1\x54\x55\x49\xd4\x60\x1a\xbc\xa3\xb5\x42\xa0\x75\x81\x69\x40\xb8\xa2\x88\x3b\xb7\xe5\x06\x98\x19\xb1\x86\xcd\xf6\x05\x80\x1b\x65\x6c\x0c\x67\xf7\xf5\xbf\xeb\xdd\xfa\x8c\xf1\xa7\xb9\x35\xa5\x16\x31\x9c\x8d\xaf\xfc\xb3\x37\x66\x46\x53\x98\xb1\x85\x54\xeb\x18\x82\x5f\x4a\x2e\x05\x83\x07\xa6\x1d\xfc\xa1\x25\x37\x02\x83\xcb\xdd\xf2\x17\xcb\x74\xbd\xe0\x98\x76\xa1\x43\x2b\xb3\x3d\x51\xf4\xa1\xcf\xf5\xc8\x72\xb3\x60\x97\xf0\x05\x35\x2e\x59\x0f\x03\x1f\xa2\x17\x61\xc1\xa3\xc5\x59\xc9\x73\x24\xf8\xf5\x21\xb8\x84\xaf\xa8\x96\x48\x92\x9f\xcc\xf0\x27\x5a\xc1\xf4\x5b\xc2\xd5\xf6\x7f\xdf\x0d\x68\xa1\x54\x9d\x3a\x2a\xe9\x28\xac\x0b\x1f\xfa\xc2\xc7\xa0\x8d\xc6\x7d\xa2\x0b\x66\xe7\x52\xc7\x30\xae\x9f\x8f\xe3\x62\xb5\xb7\x15\x4c\x08\xa9\xe7\x31\x8c\xaf\x5f\x14\x52\xb2\xa3\x35\x33\x56\xa0\x6d\xd4\x62\x70\x46\x49\x71\x7d\x68\xac\x1b\x2a\x86\x9e\x50\x3f\x88\x49\xcf\x26\xa4\x2b\x14\x5b\xc7\x20\xb5\x92\x1a\xc3\x99\x32\xfc\x69\x6f\xde\xd2\x4d\xc6\x1d\x50\x1b\xa5\x39\x08\xef\x55\xaa\x16\x54\x37\x73\x07\xb4\x60\xab\x70\x2f\xf2\xc3\xa1\xbb\x5c\xcc\xdf\x76\x06\x30\xb3\xbf\x90\x53\x98\x49\x8a\xa1\x3e\x67\xa1\x30\xcf\xfa\x90\xec\x6c\x7b\x26\x8f\x33\x7e\x9a\x7e\x3a\x56\x34\x56\x92\x39\x24\x1a\x6d\x89\xc2\x99\x59\xf5\xc8\x1a\xc8\xc7\xe9\xb0\x58\x5d\x48\x98\xa3\x35\x83\x7d\x8d\x61\x52\xac\x9a\x5d\x85\x99\x2a\x3b\x4d\x94\xa3\x9c\xe7\x14\xc3\x8f\xe3\xde\xd6\x65\xca\x30\x8a\x41\x61\x46\x6f\xab\x15\x1d\xbd\x5d\xe3\xf5\x5b\x61\x5b\x87\x8f\x57\x47\xf6\xba\x47\xa8\xcc\xfc\xf5\xf0\x2d\x8a\x01\xed\x41\xf0\x6d\x4e\x93\xe9\x5b\x6a\x85\x71\xe4\x4e\x6d\xb3\x63\xd1\xcc\x2d\xe2\xa0\x17\x8e\x48\xf4\xce\xf5\x90\xa6\x90\xba\x23\xf3\xae\x73\x3f\x99\x9e\x72\xea\x47\x0b\x14\x92\x85\x52\x67\x66\xd0\x54\x21\x99\x22\x86\xe9\xc9\x27\xb7\xe5\x64\xb1\x92\xfa\xe9\x84\x7b\xdf\x7f\x2f\x42\x81\xdc\x58\x46\xd2\xe8\x7e\x3e\x7b\xb6\xa5\x74\x92\x50\x1c\x23\x1c\xfb\x67\x88\xc8\xcd\x12\xed\xd1\x00\x3e\x7d\xfe\xf9\x76\xe8\xcf\x38\xc9\x25\x1e\x01\xdc\xdd\x4f\x3f\xdf\x0e\x01\x23\x5e\x5a\xeb\x37\xd2\x27\xfa\x72\xb6\x5d\xb1\x53\xb3\xed\x53\xbf\x92\xfa\xff\xc0\xfe\xce\x32\xf5\xc1\xef\xaa\x59\x12\xd5\x6d\xdb\xce\x0c\xdc\xca\x82\xda\x21\x21\x2b\x35\xf7\x21\x03\x99\xf9\x5c\xe1\x7d\xa9\x94\xe3\xfe\xf8\x9c\xe3\x45\x87\x5e\x66\xe7\xc2\xf0\x72\x81\x9a\x46\xcf\x38\x7b\x92\xb4\xf7\xbc\x53\xe8\xd7\x21\x4d\x53\xd0\xa5\x52\x5d\x1c\x00\x6e\xfd\x7f\xc7\xbf\x4b\x74\x1d\xd8\xf9\xc5\xce\xab\x02\x54\x0e\x7b\xb0\x03\xb5\xbb\x95\x7c\x01\x7a\x98\xe9\x2e\xbb\x24\x6a\x67\xb9\xc4\x4f\x42\xdb\xec\x85\x5c\x82\x14\x69\xb0\xbd\x0c\x76\xc3\x52\x6d\xe0\x8a\x39\xb7\xb3\xf9\x8b\x62\x67\x07\xd8\x6c\x64\x06\xe7\x72\xc1\xe6\x08\xcd\xbc\xf6\x8d\x51\x7e\x51\x55\x9d\xa8\x01\x12\xff\xfd\x72\x96\xa7\x41\x4e\x54\xc4\x51\xb4\xd9\x7c\x3f\x9c\xe2\xa2\xfa\xe0\x47\xed\xe0\xe7\x89\xaa\x2a\x00\xa3\xb9\x92\xfc\x29\x0d\x06\x9b\x41\xb9\x74\x17\xbd\x60\x7c\xc5\x7a\xda\x49\xf3\xa1\xf5\xc1\x5b\xa3\x5c\x1a\x90\x2d\x31\x00\x65\x4c\x91\xfa\x9f\x50\x58\x54\x86\x89\x34\xf0\xd3\xab\x60\xc4\x3a\x7c\x4d\x67\x98\xd2\x72\xfc\x8f\xd1\x9f\x51\x3a\x1e\x4d\x83\xed\x30\x5a\xc7\xb2\xf3\x78\x5c\x17\x58\x55\x3d\xb9\x24\xaa\x5d\x7a\x19\x69\xb1\x4b\x28\x89\x84\x5c\x76\xf7\xe6\x60\x48\xee\xd9\xeb\x9d\x19\xfd\x86\x2b\xf2\x1e\x9d\xa2\xd4\x40\xbf\x1e\x43\xc2\x20\xb7\x98\xa5\x41\xe4\xaf\x50\xb4\x3e\xb6\x16\xd1\xd6\xff\x66\xb8\x96\x44\xec\xe6\x40\x6b\x1f\x66\xc7\x90\x64\xc6\x10\xda\xb6\x83\xfc\xbd\x11\x36\x4b\xed\xa8\x1f\x35\xaf\x4d\x67\x36\x0d\x99\x44\xcd\x9f\x1d\xff\x06\x00\x00\xff\xff\xf8\xcf\x91\xc7\x7e\x0c\x00\x00"

func playerTmplBytes() ([]byte, error) {
	return bindataRead(
		_playerTmpl,
		"player.tmpl",
	)
}

func playerTmpl() (*asset, error) {
	bytes, err := playerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "player.tmpl", size: 3198, mode: os.FileMode(420), modTime: time.Unix(1552770458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl":  indexTmpl,
	"player.tmpl": playerTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl":  &bintree{indexTmpl, map[string]*bintree{}},
	"player.tmpl": &bintree{playerTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
