// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.tmpl
// player.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x6d\x6f\xdb\x36\x17\xfd\xde\x5f\x71\xc1\xe4\x01\x92\x22\xb2\x9c\x16\x6e\x02\x55\x32\x1e\x74\xe8\xcb\x80\x6d\x08\xd6\x6e\xdf\x69\xf1\x5a\xe2\x42\x93\x2a\x49\x29\x0e\x3c\xff\xf7\x81\x7a\xb1\x44\x4b\x6e\x92\x61\xf1\x87\x58\x24\xef\xb9\xe7\x5c\x1e\x5e\xd1\x71\x6e\x37\x62\xf9\x0a\x20\xce\x91\x32\xf7\x05\x20\xde\xa0\xa5\x90\xe6\x54\x1b\xb4\x09\x29\xed\x3a\xb8\x25\xc3\x29\x49\x37\x98\x90\x8a\xe3\x43\xa1\xb4\x25\x90\x2a\x69\x51\xda\x84\x70\xc9\x2d\xa7\x22\x30\x29\x15\x98\x5c\x5f\x3d\x70\x66\xf3\x84\x61\xc5\x53\x0c\xea\x87\x0e\xc7\x72\x2b\x70\x59\x71\x86\xca\xfc\x7f\xb7\x9b\x7d\x45\x5d\xa1\x9e\x7d\x51\xc6\xde\x29\x6d\xf7\xfb\x38\x6c\x96\x34\xcb\x8d\x7d\x14\x08\xf6\xb1\xc0\x84\x58\xdc\xda\x30\x35\xa6\x85\x02\x58\x29\xf6\x08\xbb\xf6\x01\x20\x55\x42\xe9\x08\xce\x3e\xd5\x7f\xef\x0f\xe3\x2b\x9a\xde\x67\x5a\x95\x92\x45\x70\x36\xbf\x75\x9f\x7e\x72\xad\xa4\x0d\xd6\x74\xc3\xc5\x63\x04\xe4\x97\x32\xe5\x8c\xc2\x57\x2a\x0d\xfc\x21\x79\xaa\x18\x92\xab\xc3\xf0\x67\x4d\x65\x3d\x60\xa8\x34\x81\x41\xcd\xd7\x3d\x50\xf8\xda\xc7\xfa\x46\x73\xb5\xa1\x57\xf0\x19\x25\x56\xd4\x8b\x81\xd7\xe1\xc9\x30\xf2\x4d\xe3\xaa\x4c\x73\xb4\xf0\xeb\x57\x72\x05\x5f\x50\x54\x68\x79\xfa\x6c\x84\x3f\x51\x33\x2a\x9f\x4a\xbc\x6f\xff\xbb\xcd\x47\x0d\xa5\x18\xd4\x51\x70\x63\x83\xba\xf0\x81\x2b\x7c\x04\x52\x49\xec\x85\x6e\xa8\xce\xb8\x8c\x60\x5e\x7f\xde\xcc\x8b\x6d\x3f\x57\x50\xc6\xb8\xcc\x22\x98\xbf\x3f\x99\x48\xf0\x41\xae\x95\xd2\x0c\x75\x93\x2d\x02\xa3\x04\x67\xef\x8f\x27\x6b\xff\x44\xe0\x25\xf2\x49\x5c\x7b\x73\x8c\x9b\x42\xd0\xc7\x08\xb8\x14\x5c\x62\xb0\x12\x2a\xbd\xef\xa7\x5b\xb8\xeb\xf9\x20\xa8\x63\xa9\x86\x75\x38\x2d\x46\x1d\xa9\xf8\x61\xc6\x2e\xa8\xf6\xfc\x20\x68\x43\xb7\x41\xcf\xe5\x7f\xc7\xcb\xf9\x26\x7b\x7a\x31\x80\x5a\xfd\x85\xa9\x0d\xd6\xdc\x46\x50\x9f\xbe\x80\xa9\x07\x79\x0c\x36\xe3\x92\xa6\x96\x57\x38\x71\x5c\x6e\xe7\x37\xf3\x9b\x91\xc4\xb3\xf6\x6c\x4f\x73\x78\xb7\x78\x37\xb5\x1b\xb4\xb4\x6a\x94\xba\x05\x0a\x56\x6a\xeb\x81\x35\x21\x6f\x16\xe3\x5d\x18\x86\x04\x39\x6a\x35\x32\x4c\x04\xd7\xc5\xb6\xb1\x0b\xac\x44\x39\x70\x67\x8e\x3c\xcb\x6d\x04\x6f\xe7\x9e\x27\xd6\x42\x51\x1b\x81\xc0\xb5\x7d\x3a\x5b\x31\x65\x02\xdf\x63\x6d\x1d\xde\xdc\x4e\x98\xc8\x03\x14\x2a\xfb\x31\x7d\x8d\x6c\x04\x7b\x44\xbe\xd3\x74\xbd\x78\x2a\x5b\xa1\x8c\x35\xcf\x35\xe6\x14\x9b\x4c\x23\x8e\xdd\x33\x4e\xe1\x35\x8c\x31\x4c\xc1\xe5\x20\xcd\x8b\x1a\xca\xf5\xe2\x39\xed\x64\xb6\x41\xc6\x69\xc0\xe5\x5a\x8d\x4c\x15\x58\x55\x44\xb0\x78\x76\x4b\xe8\x30\x69\x24\xb8\xbc\x7f\xc6\x0b\xc5\xbd\x88\x02\x86\xa9\xd2\xd4\x72\x25\x7d\x3d\x3d\x5a\xc5\x0d\xb7\xc8\xa6\x00\xe7\xee\x33\x8e\xc8\x55\x85\x7a\x92\xc0\xbb\x9b\x9f\x3e\x8c\xd7\x9f\x3c\xd3\x1f\x3f\x2d\x6e\x3e\x8c\x03\x66\x69\xa9\xb5\xdb\x48\x27\xf4\xb4\xda\x61\xb2\xe7\xaa\xf5\xa1\x7f\x20\xfd\x3f\x40\x7f\x61\x99\xfc\xe0\x17\xd5\x2c\x0e\x6b\xdb\x76\x97\x91\x54\xf3\xc2\x76\xb7\x8f\x75\x29\x53\x47\x19\xac\xca\x32\x81\x9f\x4a\x21\x4c\xea\x8e\xcf\x05\x5e\x0e\xe0\xf9\xfa\x82\xa9\xb4\xdc\xa0\xb4\xb3\x07\x5c\xdd\x73\xdb\xaf\xfc\x28\xd0\x8d\x43\x92\x24\x20\x4b\x21\x86\x71\x00\xd8\xae\xff\x1d\xbf\x97\x68\x06\x61\x17\x97\x87\x55\x7b\x40\x61\xd0\x0b\x3b\xca\xf6\x71\xcb\x4f\x84\x1e\x2b\x3d\xa8\x8b\xc3\xee\x4e\x18\xbb\x2b\x56\xab\xbe\x7d\x83\xa7\x82\x1a\x93\x10\xb7\xbf\x41\x33\x44\x40\x2b\x81\x09\x59\x51\x29\x51\x1f\x6e\x67\x71\x29\x96\x87\x64\xb1\xe0\xcb\x98\x76\xc1\xee\x2c\xd6\x4d\xc1\xed\x08\x81\x5c\xe3\x3a\x21\xb9\xb5\x45\x14\x86\x53\x77\xc2\xb0\x0b\x98\x6d\xde\x96\x64\x79\x37\x78\x8a\x43\xba\x8c\x43\xc1\x0f\x59\xc3\x2e\x6d\xa3\x02\x75\xfb\xc4\x78\x05\x9c\x25\xa4\xed\x65\x2d\xcd\xdd\x4e\x53\x99\x21\x5c\x70\xc9\x70\x0b\x5d\xea\x3b\x9a\xa1\x81\xd9\xcf\x6e\xf0\x72\xdf\x55\xaa\xc6\x68\x25\x0c\x5a\x22\xe9\x65\xee\x76\x7c\x0d\x17\x7c\x43\x33\x84\xd9\x1d\xb5\x79\x1f\xdc\x42\xb8\xd7\xba\xd1\xe9\x40\xee\xf9\x84\xde\xba\xbb\xb9\x52\x38\x8c\xfd\x9e\x80\x92\xa9\xe0\xe9\x7d\x42\x46\x66\xb3\x39\x37\x97\x1e\x05\xe7\x08\x2f\x6d\xdc\x5c\x3d\x1c\x65\xad\x84\x49\x88\xd5\x25\x12\x10\x4a\x15\x89\xfb\x0a\x85\x46\xa1\x28\x4b\x88\xbb\xe5\x33\x6a\xe9\x00\xaf\x71\xbe\x2a\x75\x8a\x2f\x27\x7e\x66\x93\xf9\x6c\x41\xda\x0b\x7c\x4d\xc3\x4d\x7e\x7b\x2c\x70\xbf\xf7\x92\xc4\x61\x3d\xeb\x0d\x99\x82\xca\xae\xde\x7d\xbf\x27\xce\x48\x47\x96\x99\xa2\xe2\x3c\x83\x7a\x50\xc4\xe5\x6e\x37\xfb\x40\x5d\x6d\x1a\xd3\x38\x78\xaf\x6e\x92\xf5\x5b\x1d\x32\x5e\x75\x16\xe9\x27\xe2\xc3\x68\xbb\xd7\x99\x6d\x5d\x02\xf3\x41\xc9\x0f\x04\xc3\x82\x66\xe8\x28\xd4\x6b\x1c\x87\x18\xee\x34\x56\x5c\x95\xc6\x91\x78\x75\x62\xcf\x3c\xe9\xdd\xdd\xed\x74\xf0\x80\xf8\xdf\x47\xec\x2e\x04\x4a\xdf\xd6\x97\xce\xec\xe9\xc8\xdc\x13\xac\xdd\x32\x7f\x2d\x59\xfe\x86\x5b\x0b\xcb\x7f\xc1\x7d\x2a\xb0\xaf\x6b\x5f\xee\x58\x09\xff\x68\x9e\xd7\x47\xf3\xea\xbc\xa2\xa2\x44\x88\x12\x5f\x4d\xbf\x63\x4d\x87\xa9\x75\xe3\xf7\x36\x0a\xce\xbb\xca\x77\xc7\x76\xf0\x2a\x20\x2d\x83\x09\xd5\x4d\x74\xe3\x99\xe1\xb3\xdf\x6d\x7c\x05\x1d\xef\x78\xad\x94\x3d\x6a\x94\xcd\x50\xf7\x1b\x38\x6c\x1e\x9b\x56\xdb\x74\xd8\x38\x6c\x7e\x8f\xff\x13\x00\x00\xff\xff\x92\x98\x82\x4f\x97\x0f\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3991, mode: os.FileMode(420), modTime: time.Unix(1552770376, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _playerTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x51\x6f\xe3\x36\x0c\x7e\xdf\xaf\x20\xdc\x0d\x68\x0f\x75\x9c\xdc\x90\xbb\xc2\xb5\x8b\xa1\x43\x7b\xf7\xb0\x0d\x87\xb5\xdb\xbb\x22\xd1\xb1\x56\x45\xf2\x24\x3a\x4d\x90\xf9\xbf\x0f\xb2\xe3\xc4\x8e\xd3\x36\x1d\x76\x7e\xb8\x58\xe4\xf7\x7d\x24\x45\xc9\x6c\x92\xd3\x42\xdd\x7c\x07\x90\xe4\xc8\x84\xff\x01\x90\x2c\x90\x18\xf0\x9c\x59\x87\x94\x06\x25\x65\xe1\x55\xd0\x35\x69\xb6\xc0\x34\x58\x4a\x7c\x2e\x8c\xa5\x00\xb8\xd1\x84\x9a\xd2\x40\x6a\x49\x92\xa9\xd0\x71\xa6\x30\x9d\x5c\x3e\x4b\x41\x79\x2a\x70\x29\x39\x86\xf5\x4b\xcb\x43\x92\x14\xde\x6c\x36\xa3\x7b\xa9\x70\x74\xcb\x1c\x56\x15\xfc\x03\x4b\x29\xd0\xb8\x9f\x36\x9b\xd1\x03\xda\x25\xda\xd1\x57\xe3\xe8\x9b\xb1\x54\x55\x49\xd4\x60\x1a\xbc\xa3\xb5\x42\xa0\x75\x81\x69\x40\xb8\xa2\x88\x3b\xb7\xe5\x06\x98\x19\xb1\x86\xcd\xf6\x05\x80\x1b\x65\x6c\x0c\x67\xf7\xf5\xbf\xeb\xdd\xfa\x8c\xf1\xa7\xb9\x35\xa5\x16\x31\x9c\x8d\xaf\xfc\xb3\x37\x66\x46\x53\x98\xb1\x85\x54\xeb\x18\x82\x5f\x4a\x2e\x05\x83\x07\xa6\x1d\xfc\xa1\x25\x37\x02\x83\xcb\xdd\xf2\x17\xcb\x74\xbd\xe0\x98\x76\xa1\x43\x2b\xb3\x3d\x51\xf4\xa1\xcf\xf5\xc8\x72\xb3\x60\x97\xf0\x05\x35\x2e\x59\x0f\x03\x1f\xa2\x17\x61\xc1\xa3\xc5\x59\xc9\x73\x24\xf8\xf5\x21\xb8\x84\xaf\xa8\x96\x48\x92\x9f\xcc\xf0\x27\x5a\xc1\xf4\x5b\xc2\xd5\xf6\x7f\xdf\x0d\x68\xa1\x54\x9d\x3a\x2a\xe9\x28\xac\x0b\x1f\xfa\xc2\xc7\xa0\x8d\xc6\x7d\xa2\x0b\x66\xe7\x52\xc7\x30\xae\x9f\x8f\xe3\x62\xb5\xb7\x15\x4c\x08\xa9\xe7\x31\x8c\xaf\x5f\x14\x52\xb2\xa3\x35\x33\x56\xa0\x6d\xd4\x62\x70\x46\x49\x71\x7d\x68\xac\x1b\x2a\x86\x9e\x50\x3f\x88\x49\xcf\x26\xa4\x2b\x14\x5b\xc7\x20\xb5\x92\x1a\xc3\x99\x32\xfc\x69\x6f\xde\xd2\x4d\xc6\x1d\x50\x1b\xa5\x39\x08\xef\x55\xaa\x16\x54\x37\x73\x07\xb4\x60\xab\x70\x2f\xf2\xc3\xa1\xbb\x5c\xcc\xdf\x76\x06\x30\xb3\xbf\x90\x53\x98\x49\x8a\xa1\x3e\x67\xa1\x30\xcf\xfa\x90\xec\x6c\x7b\x26\x8f\x33\x7e\x9a\x7e\x3a\x56\x34\x56\x92\x39\x24\x1a\x6d\x89\xc2\x99\x59\xf5\xc8\x1a\xc8\xc7\xe9\xb0\x58\x5d\x48\x98\xa3\x35\x83\x7d\x8d\x61\x52\xac\x9a\x5d\x85\x99\x2a\x3b\x4d\x94\xa3\x9c\xe7\x14\xc3\x8f\xe3\xde\xd6\x65\xca\x30\x8a\x41\x61\x46\x6f\xab\x15\x1d\xbd\x5d\xe3\xf5\x5b\x61\x5b\x87\x8f\x57\x47\xf6\xba\x47\xa8\xcc\xfc\xf5\xf0\x2d\x8a\x01\xed\x41\xf0\x6d\x4e\x93\xe9\x5b\x6a\x85\x71\xe4\x4e\x6d\xb3\x63\xd1\xcc\x2d\xe2\xa0\x17\x8e\x48\xf4\xce\xf5\x90\xa6\x90\xba\x23\xf3\xae\x73\x3f\x99\x9e\x72\xea\x47\x0b\x14\x92\x85\x52\x67\x66\xd0\x54\x21\x99\x22\x86\xe9\xc9\x27\xb7\xe5\x64\xb1\x92\xfa\xe9\x84\x7b\xdf\x7f\x2f\x42\x81\xdc\x58\x46\xd2\xe8\x7e\x3e\x7b\xb6\xa5\x74\x92\x50\x1c\x23\x1c\xfb\x67\x88\xc8\xcd\x12\xed\xd1\x00\x3e\x7d\xfe\xf9\x76\xe8\xcf\x38\xc9\x25\x1e\x01\xdc\xdd\x4f\x3f\xdf\x0e\x01\x23\x5e\x5a\xeb\x37\xd2\x27\xfa\x72\xb6\x5d\xb1\x53\xb3\xed\x53\xbf\x92\xfa\xff\xc0\xfe\xce\x32\xf5\xc1\xef\xaa\x59\x12\xd5\x6d\xdb\xce\x0c\xdc\xca\x82\xda\x21\x21\x2b\x35\xf7\x21\x03\x99\xf9\x5c\xe1\x7d\xa9\x94\xe3\xfe\xf8\x9c\xe3\x45\x87\x5e\x66\xe7\xc2\xf0\x72\x81\x9a\x46\xcf\x38\x7b\x92\xb4\xf7\xbc\x53\xe8\xd7\x21\x4d\x53\xd0\xa5\x52\x5d\x1c\x00\x6e\xfd\x7f\xc7\xbf\x4b\x74\x1d\xd8\xf9\xc5\xce\xab\x02\x54\x0e\x7b\xb0\x03\xb5\xbb\x95\x7c\x01\x7a\x98\xe9\x2e\xbb\x24\x6a\x67\xb9\xc4\x4f\x42\xdb\xec\x85\x5c\x82\x14\x69\xb0\xbd\x0c\x76\xc3\x52\x6d\xe0\x8a\x39\xb7\xb3\xf9\x8b\x62\x67\x07\xd8\x6c\x64\x06\xe7\x72\xc1\xe6\x08\xcd\xbc\xf6\x8d\x51\x7e\x51\x55\x9d\xa8\x01\x12\xff\xfd\x72\x96\xa7\x41\x4e\x54\xc4\x51\xb4\xd9\x7c\x3f\x9c\xe2\xa2\xfa\xe0\x47\xed\xe0\xe7\x89\xaa\x2a\x00\xa3\xb9\x92\xfc\x29\x0d\x06\x9b\x41\xb9\x74\x17\xbd\x60\x7c\xc5\x7a\xda\x49\xf3\xa1\xf5\xc1\x5b\xa3\x5c\x1a\x90\x2d\x31\x00\x65\x4c\x91\xfa\x9f\x50\x58\x54\x86\x89\x34\xf0\xd3\xab\x60\xc4\x3a\x7c\x4d\x67\x98\xd2\x72\xfc\x8f\xd1\x9f\x51\x3a\x1e\x4d\x83\xed\x30\x5a\xc7\xb2\xf3\x78\x5c\x17\x58\x55\x3d\xb9\x24\xaa\x5d\x7a\x19\x69\xb1\x4b\x28\x89\x84\x5c\x76\xf7\xe6\x60\x48\xee\xd9\xeb\x9d\x19\xfd\x86\x2b\xf2\x1e\x9d\xa2\xd4\x40\xbf\x1e\x43\xc2\x20\xb7\x98\xa5\x41\xe4\xaf\x50\xb4\x3e\xb6\x16\xd1\xd6\xff\x66\xb8\x96\x44\xec\xe6\x40\x6b\x1f\x66\xc7\x90\x64\xc6\x10\xda\xb6\x83\xfc\xbd\x11\x36\x4b\xed\xa8\x1f\x35\xaf\x4d\x67\x36\x0d\x99\x44\xcd\x9f\x1d\xff\x06\x00\x00\xff\xff\xf8\xcf\x91\xc7\x7e\x0c\x00\x00"

func playerTmplBytes() ([]byte, error) {
	return bindataRead(
		_playerTmpl,
		"player.tmpl",
	)
}

func playerTmpl() (*asset, error) {
	bytes, err := playerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "player.tmpl", size: 3198, mode: os.FileMode(420), modTime: time.Unix(1552321168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl":  indexTmpl,
	"player.tmpl": playerTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl":  &bintree{indexTmpl, map[string]*bintree{}},
	"player.tmpl": &bintree{playerTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
