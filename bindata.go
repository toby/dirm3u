// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdb\x6e\xe3\x36\x10\x7d\xdf\xaf\x18\x30\x29\xb0\x5d\x44\x96\x9d\x85\xb3\x81\x22\x19\x45\x8a\xee\x6e\x81\x16\x08\x90\xb4\xef\xb4\x38\xb6\x88\x50\xa4\x4a\x52\x5a\x1b\x82\xff\xbd\xa0\x2e\x96\x68\x3b\x89\x03\x14\x68\xf4\x10\x93\xa3\x39\x67\xce\xcc\xf0\xa2\x38\xb3\xb9\x58\x7c\x00\x88\x33\xa4\xcc\xfd\x00\x88\x73\xb4\x14\xd2\x8c\x6a\x83\x36\x21\xa5\x5d\x05\xb7\x64\x6c\x92\x34\xc7\x84\x54\x1c\x7f\x14\x4a\x5b\x02\xa9\x92\x16\xa5\x4d\x08\x97\xdc\x72\x2a\x02\x93\x52\x81\xc9\xec\xea\x07\x67\x36\x4b\x18\x56\x3c\xc5\xa0\x19\xf4\x38\x96\x5b\x81\x8b\x8a\x33\x54\xe6\x97\xba\x9e\x3c\xa2\xae\x50\x4f\xbe\x2b\x63\x1f\x94\xb6\xbb\x5d\x1c\xb6\xaf\xb4\xaf\x1b\xbb\x15\x08\x76\x5b\x60\x42\x2c\x6e\x6c\x98\x1a\xd3\x41\x01\x2c\x15\xdb\x42\xdd\x0d\x00\x52\x25\x94\x8e\xe0\xe2\x6b\xf3\x77\xb7\x9f\x5f\xd2\xf4\x79\xad\x55\x29\x59\x04\x17\xd3\x5b\xf7\x0c\xc6\x95\x92\x36\x58\xd1\x9c\x8b\x6d\x04\xe4\x8f\x32\xe5\x8c\xc2\x23\x95\x06\xfe\x92\x3c\x55\x0c\xc9\xd5\x7e\xfa\x9b\xa6\xb2\x99\x30\x54\x9a\xc0\xa0\xe6\xab\x01\x28\xfc\xe4\x63\x3d\xd1\x4c\xe5\xf4\x0a\xbe\xa1\xc4\x8a\x7a\x3e\xf0\x29\x7c\xd1\x8d\x3c\x69\x5c\x96\x69\x86\x16\xfe\x7c\x24\x57\xf0\x1d\x45\x85\x96\xa7\x67\x23\xfc\x8d\x9a\x51\xf9\x16\xf1\xae\xfb\xef\x8a\x8f\x1a\x4a\x31\xca\xa3\xe0\xc6\x06\x4d\xe2\x03\x97\xf8\x08\xa4\x92\x38\x08\xcd\xa9\x5e\x73\x19\xc1\xb4\x79\xae\xa7\xc5\x66\xb0\x15\x94\x31\x2e\xd7\x11\x4c\xef\x5e\x24\x12\x7c\xc4\xb5\x54\x9a\xa1\x6e\xd9\x22\x30\x4a\x70\x76\x77\x68\x6c\xfa\x27\x02\x8f\xc8\x0f\x62\xe6\xd9\x18\x37\x85\xa0\xdb\x08\xb8\x14\x5c\x62\xb0\x14\x2a\x7d\x1e\xcc\x1d\xdc\x6c\x3a\x72\xea\xa3\x54\x07\xe1\xbd\x0a\xd5\x3b\x35\xcd\x3c\x72\xca\xe9\x26\x18\x48\x7e\x3a\x11\xf4\xe9\x94\x8d\x67\x5b\xe9\x11\xcc\x8a\x4d\x9b\x15\x58\x6b\xdc\x1e\x32\xf3\x7c\xfd\xbf\xf0\x5e\x74\x0b\xff\x34\xf9\xcd\xfc\xe6\x54\xa9\x68\x69\xd5\x21\xd0\xa4\x03\x0a\x96\x6a\xe3\x81\xb5\x2e\xd7\xf3\xe3\x12\x8d\x5d\x82\x0c\xb5\x3a\xea\xa6\x71\xf4\x4b\x51\x8e\x5a\x37\x43\xbe\xce\x6c\x04\x9f\xa7\x9e\xe8\x95\x50\xd4\x46\x20\x70\x65\xdf\x66\x2b\x46\x7c\xfb\x1c\xfa\x0d\xd8\xe5\xe1\xfa\xf6\x44\x87\x79\x80\x42\xad\x5f\x0f\x5f\x23\x3b\x82\x3d\x08\xbe\xd7\x34\x9b\xbf\xc5\x56\x28\x63\xcd\xb9\xcd\xfd\x42\x2b\xa0\x3c\x83\xc2\xdb\x4d\x8e\x61\x0a\x2e\x47\x34\xef\xda\x6d\x66\xf3\x73\xf6\x9a\x49\x8e\x8c\xd3\x80\xcb\x95\x3a\x6a\xaa\xc0\xaa\x22\x82\xf9\xd9\xfb\x45\x8f\x49\x23\xc1\xe5\xf3\x19\xa7\x8d\x3b\xa5\x02\x86\xa9\xd2\xd4\x72\x25\x7d\x3d\x03\x5a\xc5\x0d\xb7\xc8\x4e\x01\x4e\xdd\x73\xec\x91\xa9\x0a\xf5\xc9\x00\x6e\xbe\xfc\x7a\x7f\xfc\x3e\x4d\x2d\xaf\xf0\x84\xc3\x6f\x5f\xe7\x5f\xee\x8f\x1d\x26\x69\xa9\xb5\x2b\xa4\x13\xfa\xb2\xda\x31\xd9\xb9\x6a\x7d\xe8\x57\xa4\xff\x07\xe8\xef\x4c\x93\xef\xfc\xae\x9c\xc5\x61\xd3\xb6\xcd\x25\x2a\xec\x6f\x51\xb1\xbb\x94\x74\x97\x97\xee\xcc\x4b\x05\x35\x26\x21\x4e\x74\xd0\x4e\x11\xd0\x4a\x60\x42\x96\x54\x4a\xd4\xfb\xfb\x4c\x5c\x8a\xc5\x9e\x39\x16\x7c\x11\xd3\xde\xd9\x35\x68\xb3\x52\x5c\x98\x04\x32\x8d\xab\x84\x64\xd6\x16\x51\x18\x9e\xba\x45\x85\xbd\xc3\x24\xff\x5c\x92\xc5\xc3\x68\x14\x87\x74\x11\x87\x82\xef\x59\xc3\x9e\xb6\x55\x81\xba\x1b\x31\x5e\x01\x67\x09\xe9\x16\x78\x17\x66\x5d\x6b\x2a\xd7\x08\x1f\xb9\x64\xb8\x81\x9e\xfa\x81\xae\xd1\xc0\xe4\x77\x37\xf9\xf3\xae\x4f\x6f\x83\xd1\x49\x18\xed\x13\x64\x90\x59\xd7\x7c\x05\x1f\x79\x4e\xd7\x08\x93\x07\x6a\xb3\xc1\xb9\x83\x70\x87\x9c\xd1\xe9\x48\xee\xe5\x09\xbd\xcd\x92\x77\xa9\x70\x18\xbb\x9d\xc7\x80\xc2\xa0\x87\x1a\xb7\x47\xb6\x8b\x48\x2b\x61\x12\x62\x75\x89\x04\x84\x52\x45\xe2\x7e\x42\xa1\x51\x28\xca\x12\xe2\xae\xbd\x8c\x5a\x3a\xc2\x6b\x00\x8c\x2a\x75\x8a\xef\x8f\xeb\xc2\x26\xd3\xc9\x9c\x74\x37\xda\x26\x0c\x67\x7c\xda\x16\xe8\x05\xed\x8a\xd1\x58\xbd\x29\x53\x50\xd9\xa7\x73\xd8\xe3\xc8\xa2\xae\x27\xf7\xd4\x69\x8c\x43\xf7\x8a\xa7\x5d\xb2\xa1\x1a\x21\xe3\x55\x5f\xc5\xc1\x10\xab\x7d\xdb\xb9\x2a\x46\x1f\x7a\xdf\xb6\xd0\x97\x4d\xa1\xaf\x2e\x2b\x2a\x4a\x84\x28\xf1\x4b\x3e\xca\x6b\xd7\xb1\x4d\x45\xf1\x9f\xce\x0f\x2e\xdb\x9e\xd8\xed\xfa\x36\x18\xad\x37\xd2\x85\xd1\xf5\x73\x58\xd0\x35\x86\x75\xcd\x65\xda\x79\xbb\x9c\xf8\xe3\xc3\xee\xf5\x84\x84\x6a\xdf\xc9\x7b\xa5\xf1\x4a\x29\x7b\xb0\x0a\xdb\xa9\xfe\x93\x24\x6c\x87\xed\x3a\x6e\x97\x6f\x1c\xb6\x9f\x47\xff\x06\x00\x00\xff\xff\x8c\x30\x20\x2d\x26\x0d\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3366, mode: os.FileMode(420), modTime: time.Unix(1549241350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
