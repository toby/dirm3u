// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.tmpl
// player.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5b\x6f\xdb\x36\x14\x7e\xef\xaf\x38\x60\x32\x20\x29\x22\xcb\x69\xe1\xb6\x50\x25\x63\xe8\xd0\xcb\x80\x0d\x08\xd6\x6e\xef\x34\x79\x24\x71\xa1\x48\x95\xa4\x14\x1b\x86\xff\xfb\x40\x5d\x2c\xc9\x76\x12\x07\x58\xf4\x10\xf3\xf2\x7d\xe7\xf6\x1d\x8a\x8a\x73\x57\xc8\xe5\x2b\x80\x38\x47\xca\xfd\x0f\x80\xb8\x40\x47\x81\xe5\xd4\x58\x74\x09\xa9\x5c\x1a\x7c\x20\xe3\x25\x45\x0b\x4c\x48\x2d\xf0\xa1\xd4\xc6\x11\x60\x5a\x39\x54\x2e\x21\x42\x09\x27\xa8\x0c\x2c\xa3\x12\x93\xdb\x9b\x07\xc1\x5d\x9e\x70\xac\x05\xc3\xa0\x19\xf4\x3c\x4e\x38\x89\xcb\x5a\x70\xd4\xf6\xd7\xed\x76\xf6\x1d\x4d\x8d\x66\xf6\x4d\x5b\x77\xa7\x8d\xdb\xed\xe2\xb0\xdd\xd2\x6e\xb7\x6e\x23\x11\xdc\xa6\xc4\x84\x38\x5c\xbb\x90\x59\xdb\x51\x01\xac\x34\xdf\xc0\xb6\x1b\x00\x30\x2d\xb5\x89\xe0\xe2\x4b\xf3\xf7\x71\x3f\xbf\xa2\xec\x3e\x33\xba\x52\x3c\x82\x8b\xf9\x07\xff\x0c\x8b\xa9\x56\x2e\x48\x69\x21\xe4\x26\x02\xf2\x47\xc5\x04\xa7\xf0\x9d\x2a\x0b\x7f\x2b\xc1\x34\x47\x72\xb3\x9f\xfe\x6a\xa8\x6a\x26\x2c\x55\x36\xb0\x68\x44\x3a\x10\x85\xaf\xa7\x5c\x3f\x68\xae\x0b\x7a\x03\x5f\x51\x61\x4d\x27\x18\x78\x1d\x3e\x0a\x23\x3f\x0c\xae\x2a\x96\xa3\x83\x3f\xbf\x93\x1b\xf8\x86\xb2\x46\x27\xd8\xd9\x0c\xff\xa0\xe1\x54\x3d\x67\x78\xd7\xfd\xf7\xc5\x47\x03\x95\x1c\xe5\x51\x0a\xeb\x82\x26\xf1\x81\x4f\x7c\x04\x4a\x2b\x1c\x02\x2d\xa8\xc9\x84\x8a\x60\xde\x3c\x6f\xe6\xe5\x7a\x58\x2b\x29\xe7\x42\x65\x11\xcc\x3f\x3e\x6a\x48\x8a\x91\xad\x95\x36\x1c\x4d\x6b\x2d\x02\xab\xa5\xe0\x1f\x0f\x17\x1b\xfd\x44\x30\x31\x34\x75\xe2\x76\xb2\xc6\x85\x2d\x25\xdd\x44\x20\x94\x14\x0a\x83\x95\xd4\xec\x7e\x58\xee\xe8\x6e\xe7\x23\x50\xef\xa5\x3e\x70\xef\x49\xaa\x1e\xd4\x88\x79\x04\x2a\xe8\x3a\x18\x8c\xfc\x72\xb8\x5d\x14\xd9\xf3\x9b\x01\xf4\xea\x5f\x64\x2e\x48\x85\x8b\xa0\x69\xab\x80\xeb\x07\x75\x48\x76\xd1\xb5\xe0\x69\xc6\x77\x8b\x77\xa7\x92\x46\x2b\xa7\x0f\x89\x66\x1d\x51\xb0\xd2\xeb\x09\x59\x0b\x79\xb3\x38\x4e\xd6\x18\x12\xe4\x68\xf4\x51\x5d\x23\xb8\x2d\xd7\x6d\x55\x61\x25\xab\x91\x88\x72\x14\x59\xee\x22\x78\x3b\x9f\x94\x2e\x95\x9a\xba\x08\x24\xa6\xee\x79\x6b\xe5\xc8\xde\x5e\x78\x53\x29\x74\x79\x78\xf3\xe1\x44\xad\x27\x84\x52\x67\x4f\xbb\x6f\x90\x1f\xd1\x1e\x38\xdf\xc7\x74\xbb\x78\xce\x5a\xa9\xad\xb3\xe7\xca\xec\x94\x37\x99\x41\x3c\xd2\xc2\x09\x13\x93\xbe\x3e\xa6\x29\x85\x1a\x99\x79\x51\xdf\xdf\x2e\xce\xe9\xfa\x59\x81\x5c\xd0\x40\xa8\x54\x1f\x89\x2a\x70\xba\x8c\x60\x71\x76\xe7\xf6\x9c\x34\x92\x42\xdd\x9f\x71\xee\xfb\xf7\x45\xc0\x91\x69\x43\x9d\xd0\x6a\x1a\xcf\xc0\x56\x0b\x2b\x1c\xf2\x53\x84\x73\xff\x1c\x23\x72\x5d\xa3\x39\xe9\xc0\xbb\xf7\xbf\x7d\x3a\xde\x4f\x99\x13\x35\x9e\x00\x7c\xfe\xb2\x78\xff\xe9\x18\x30\x63\x95\x31\xbe\x90\x3e\xd0\xc7\xa3\x1d\x1b\x3b\x37\xda\x29\xf5\x13\xa1\xff\x0f\xec\x2f\x4c\xd3\x14\xfc\xa2\x9c\xc5\x61\x23\xdb\xfe\xce\xc0\x8c\x28\x5d\x7f\x49\x48\x2b\xc5\xbc\xcb\xe0\x74\x96\x49\xfc\x52\x49\x69\x99\x6f\x9f\x2b\xbc\x1e\xd1\x8b\xf4\x8a\x6b\x56\x15\xa8\xdc\xec\x01\x57\xf7\xc2\x0d\x3b\x3f\x4b\xf4\xf3\x90\x24\x09\xa8\x4a\xca\x31\x0e\x00\xbb\xfd\x7f\xe1\xcf\x0a\xed\x08\x76\x75\xbd\xdf\xb5\x03\x94\x16\x27\xb0\x03\x6b\x9f\xd7\xe2\x11\xe8\x61\xa4\xfb\xe8\xe2\xb0\xbf\xba\xc5\xfe\x26\xd4\x45\xdf\xbd\x68\x99\xa4\xd6\x26\xc4\xd7\x37\x68\xa7\x08\x18\x2d\x31\x21\x2b\xaa\x14\x9a\xfd\x25\x2a\xae\xe4\x72\x6f\x2c\x96\x62\x19\xd3\x1e\xec\x7b\xb1\x39\x14\x7c\x45\x08\xe4\x06\xd3\x84\xe4\xce\x95\x51\x18\x9e\xba\xba\x85\x3d\x60\x56\xbc\xad\xc8\xf2\x6e\x34\x8a\x43\xba\x8c\x43\x29\xf6\x56\xc3\xde\x6c\x1b\x05\x9a\x6e\xc4\x45\x0d\x82\x27\xa4\x3b\xcb\x3a\x37\xb7\x5b\x43\x55\x86\x70\x25\x14\xc7\x35\xf4\xa6\xef\x68\x86\x16\x66\xbf\xfb\xc9\xeb\x5d\x9f\xa9\x86\xa3\x0b\x61\x74\x24\x92\x21\xcc\xed\x56\xa4\x70\x25\x0a\x9a\x21\xcc\xee\xa8\xcb\x07\x70\x47\xe1\x5f\xd2\xd6\xb0\x51\xb8\x97\x27\xe2\x6d\x4e\x37\x9f\x0a\xcf\xb1\xdb\x11\xd0\x8a\x49\xc1\xee\x13\x72\x24\x36\x97\x0b\x7b\x3d\x71\xc1\x2b\x62\x62\x36\x6e\x2f\x12\xde\x65\xa3\xa5\x4d\x88\x33\x15\x12\x90\x5a\x97\x89\xff\x09\xa5\x41\xa9\x29\x4f\x88\xbf\x8c\x73\xea\xe8\x88\xaf\x55\xbe\xae\x0c\xc3\x97\x3b\x7e\xe1\x92\xf9\x6c\x41\xba\x7b\x76\xe3\x86\x5f\xfc\xb1\x29\x71\xb7\x9b\x18\x89\xc3\x66\x75\x32\x65\x4b\xaa\xfa\x7c\x0f\xe7\x3d\xf1\x42\x3a\x90\xcc\x29\x57\xbc\x66\xd0\x8c\x92\xb8\xdc\x6e\x67\x9f\xa8\xcf\x4d\x2b\x1a\x4f\x3f\xc9\x9b\xe2\x43\xa9\x43\x2e\xea\x5e\x22\xc3\x42\xac\xf7\x9a\xf6\x12\x89\x5e\xf5\xd8\x56\x45\x97\x8d\x8a\x6e\x2e\x6b\x2a\x2b\x84\x28\x99\xea\x69\x54\x93\xae\x1d\x1a\xb9\xe0\xcf\x0e\x07\x97\xad\xe0\x76\xbb\x5e\x63\xa3\x73\x8b\x74\x6e\x74\x91\x87\x25\xcd\x30\xdc\x6e\x85\x62\x1d\xba\x0d\x70\x3c\x3e\x6c\x8d\x49\x20\xa1\xde\xb7\xc9\x3e\xd2\x38\xd5\xda\x1d\xb4\x78\x3b\xd5\x7f\x64\x85\xed\xb0\x3d\x24\xda\xb3\x21\x0e\xdb\x0f\xbe\xff\x02\x00\x00\xff\xff\x28\x31\xfe\x6f\xf8\x0d\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3576, mode: os.FileMode(420), modTime: time.Unix(1552320810, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _playerTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x51\x6f\xe3\x36\x0c\x7e\xdf\xaf\x20\xdc\x0d\x68\x0f\x75\x9c\xdc\x90\xbb\xc2\xb5\x8b\xa1\x43\x7b\xf7\xb0\x0d\x87\xb5\xdb\xbb\x22\xd1\xb1\x56\x45\xf2\x24\x3a\x4d\x90\xf9\xbf\x0f\xb2\xe3\xc4\x8e\xd3\x36\x1d\x76\x7e\xb8\x58\xe4\xf7\x7d\x24\x45\xc9\x6c\x92\xd3\x42\xdd\x7c\x07\x90\xe4\xc8\x84\xff\x01\x90\x2c\x90\x18\xf0\x9c\x59\x87\x94\x06\x25\x65\xe1\x55\xd0\x35\x69\xb6\xc0\x34\x58\x4a\x7c\x2e\x8c\xa5\x00\xb8\xd1\x84\x9a\xd2\x40\x6a\x49\x92\xa9\xd0\x71\xa6\x30\x9d\x5c\x3e\x4b\x41\x79\x2a\x70\x29\x39\x86\xf5\x4b\xcb\x43\x92\x14\xde\x6c\x36\xa3\x7b\xa9\x70\x74\xcb\x1c\x56\x15\xfc\x03\x4b\x29\xd0\xb8\x9f\x36\x9b\xd1\x03\xda\x25\xda\xd1\x57\xe3\xe8\x9b\xb1\x54\x55\x49\xd4\x60\x1a\xbc\xa3\xb5\x42\xa0\x75\x81\x69\x40\xb8\xa2\x88\x3b\xb7\xe5\x06\x98\x19\xb1\x86\xcd\xf6\x05\x80\x1b\x65\x6c\x0c\x67\xf7\xf5\xbf\xeb\xdd\xfa\x8c\xf1\xa7\xb9\x35\xa5\x16\x31\x9c\x8d\xaf\xfc\xb3\x37\x66\x46\x53\x98\xb1\x85\x54\xeb\x18\x82\x5f\x4a\x2e\x05\x83\x07\xa6\x1d\xfc\xa1\x25\x37\x02\x83\xcb\xdd\xf2\x17\xcb\x74\xbd\xe0\x98\x76\xa1\x43\x2b\xb3\x3d\x51\xf4\xa1\xcf\xf5\xc8\x72\xb3\x60\x97\xf0\x05\x35\x2e\x59\x0f\x03\x1f\xa2\x17\x61\xc1\xa3\xc5\x59\xc9\x73\x24\xf8\xf5\x21\xb8\x84\xaf\xa8\x96\x48\x92\x9f\xcc\xf0\x27\x5a\xc1\xf4\x5b\xc2\xd5\xf6\x7f\xdf\x0d\x68\xa1\x54\x9d\x3a\x2a\xe9\x28\xac\x0b\x1f\xfa\xc2\xc7\xa0\x8d\xc6\x7d\xa2\x0b\x66\xe7\x52\xc7\x30\xae\x9f\x8f\xe3\x62\xb5\xb7\x15\x4c\x08\xa9\xe7\x31\x8c\xaf\x5f\x14\x52\xb2\xa3\x35\x33\x56\xa0\x6d\xd4\x62\x70\x46\x49\x71\x7d\x68\xac\x1b\x2a\x86\x9e\x50\x3f\x88\x49\xcf\x26\xa4\x2b\x14\x5b\xc7\x20\xb5\x92\x1a\xc3\x99\x32\xfc\x69\x6f\xde\xd2\x4d\xc6\x1d\x50\x1b\xa5\x39\x08\xef\x55\xaa\x16\x54\x37\x73\x07\xb4\x60\xab\x70\x2f\xf2\xc3\xa1\xbb\x5c\xcc\xdf\x76\x06\x30\xb3\xbf\x90\x53\x98\x49\x8a\xa1\x3e\x67\xa1\x30\xcf\xfa\x90\xec\x6c\x7b\x26\x8f\x33\x7e\x9a\x7e\x3a\x56\x34\x56\x92\x39\x24\x1a\x6d\x89\xc2\x99\x59\xf5\xc8\x1a\xc8\xc7\xe9\xb0\x58\x5d\x48\x98\xa3\x35\x83\x7d\x8d\x61\x52\xac\x9a\x5d\x85\x99\x2a\x3b\x4d\x94\xa3\x9c\xe7\x14\xc3\x8f\xe3\xde\xd6\x65\xca\x30\x8a\x41\x61\x46\x6f\xab\x15\x1d\xbd\x5d\xe3\xf5\x5b\x61\x5b\x87\x8f\x57\x47\xf6\xba\x47\xa8\xcc\xfc\xf5\xf0\x2d\x8a\x01\xed\x41\xf0\x6d\x4e\x93\xe9\x5b\x6a\x85\x71\xe4\x4e\x6d\xb3\x63\xd1\xcc\x2d\xe2\xa0\x17\x8e\x48\xf4\xce\xf5\x90\xa6\x90\xba\x23\xf3\xae\x73\x3f\x99\x9e\x72\xea\x47\x0b\x14\x92\x85\x52\x67\x66\xd0\x54\x21\x99\x22\x86\xe9\xc9\x27\xb7\xe5\x64\xb1\x92\xfa\xe9\x84\x7b\xdf\x7f\x2f\x42\x81\xdc\x58\x46\xd2\xe8\x7e\x3e\x7b\xb6\xa5\x74\x92\x50\x1c\x23\x1c\xfb\x67\x88\xc8\xcd\x12\xed\xd1\x00\x3e\x7d\xfe\xf9\x76\xe8\xcf\x38\xc9\x25\x1e\x01\xdc\xdd\x4f\x3f\xdf\x0e\x01\x23\x5e\x5a\xeb\x37\xd2\x27\xfa\x72\xb6\x5d\xb1\x53\xb3\xed\x53\xbf\x92\xfa\xff\xc0\xfe\xce\x32\xf5\xc1\xef\xaa\x59\x12\xd5\x6d\xdb\xce\x0c\xdc\xca\x82\xda\x21\x21\x2b\x35\xf7\x21\x03\x99\xf9\x5c\xe1\x7d\xa9\x94\xe3\xfe\xf8\x9c\xe3\x45\x87\x5e\x66\xe7\xc2\xf0\x72\x81\x9a\x46\xcf\x38\x7b\x92\xb4\xf7\xbc\x53\xe8\xd7\x21\x4d\x53\xd0\xa5\x52\x5d\x1c\x00\x6e\xfd\x7f\xc7\xbf\x4b\x74\x1d\xd8\xf9\xc5\xce\xab\x02\x54\x0e\x7b\xb0\x03\xb5\xbb\x95\x7c\x01\x7a\x98\xe9\x2e\xbb\x24\x6a\x67\xb9\xc4\x4f\x42\xdb\xec\x85\x5c\x82\x14\x69\xb0\xbd\x0c\x76\xc3\x52\x6d\xe0\x8a\x39\xb7\xb3\xf9\x8b\x62\x67\x07\xd8\x6c\x64\x06\xe7\x72\xc1\xe6\x08\xcd\xbc\xf6\x8d\x51\x7e\x51\x55\x9d\xa8\x01\x12\xff\xfd\x72\x96\xa7\x41\x4e\x54\xc4\x51\xb4\xd9\x7c\x3f\x9c\xe2\xa2\xfa\xe0\x47\xed\xe0\xe7\x89\xaa\x2a\x00\xa3\xb9\x92\xfc\x29\x0d\x06\x9b\x41\xb9\x74\x17\xbd\x60\x7c\xc5\x7a\xda\x49\xf3\xa1\xf5\xc1\x5b\xa3\x5c\x1a\x90\x2d\x31\x00\x65\x4c\x91\xfa\x9f\x50\x58\x54\x86\x89\x34\xf0\xd3\xab\x60\xc4\x3a\x7c\x4d\x67\x98\xd2\x72\xfc\x8f\xd1\x9f\x51\x3a\x1e\x4d\x83\xed\x30\x5a\xc7\xb2\xf3\x78\x5c\x17\x58\x55\x3d\xb9\x24\xaa\x5d\x7a\x19\x69\xb1\x4b\x28\x89\x84\x5c\x76\xf7\xe6\x60\x48\xee\xd9\xeb\x9d\x19\xfd\x86\x2b\xf2\x1e\x9d\xa2\xd4\x40\xbf\x1e\x43\xc2\x20\xb7\x98\xa5\x41\xe4\xaf\x50\xb4\x3e\xb6\x16\xd1\xd6\xff\x66\xb8\x96\x44\xec\xe6\x40\x6b\x1f\x66\xc7\x90\x64\xc6\x10\xda\xb6\x83\xfc\xbd\x11\x36\x4b\xed\xa8\x1f\x35\xaf\x4d\x67\x36\x0d\x99\x44\xcd\x9f\x1d\xff\x06\x00\x00\xff\xff\xf8\xcf\x91\xc7\x7e\x0c\x00\x00"

func playerTmplBytes() ([]byte, error) {
	return bindataRead(
		_playerTmpl,
		"player.tmpl",
	)
}

func playerTmpl() (*asset, error) {
	bytes, err := playerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "player.tmpl", size: 3198, mode: os.FileMode(420), modTime: time.Unix(1552321168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl":  indexTmpl,
	"player.tmpl": playerTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl":  &bintree{indexTmpl, map[string]*bintree{}},
	"player.tmpl": &bintree{playerTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
